!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var n in r)("object"==typeof exports?exports:t)[n]=r[n]}}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=8)}([function(t,e,r){"use strict";function n(t,e,r){t instanceof RegExp&&(t=i(t,r)),e instanceof RegExp&&(e=i(e,r));var n=o(t,e,r);return n&&{start:n[0],end:n[1],pre:r.slice(0,n[0]),body:r.slice(n[0]+t.length,n[1]),post:r.slice(n[1]+e.length)}}function i(t,e){var r=e.match(t);return r?r[0]:null}function o(t,e,r){var n,i,o,s,u,a=r.indexOf(t),c=r.indexOf(e,a+1),h=a;if(a>=0&&c>0){for(n=[],o=r.length;h>=0&&!u;)h==a?(n.push(h),a=r.indexOf(t,h+1)):1==n.length?u=[n.pop(),c]:((i=n.pop())<o&&(o=i,s=c),c=r.indexOf(e,h+1)),h=a<c&&a>=0?a:c;n.length&&(u=[o,s])}return u}t.exports=n,n.range=o},function(t,e){t.exports=function(t,e){for(var n=[],i=0;i<t.length;i++){var o=e(t[i],i);r(o)?n.push.apply(n,o):n.push(o)}return n};var r=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,r){var n=r(1),i=r(0);t.exports=function(t){if(!t)return[];"{}"===t.substr(0,2)&&(t="\\{\\}"+t.substr(2));return function t(e,r){var o=[];var s=i("{","}",e);if(!s||/\$$/.test(s.pre))return[e];var a=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(s.body);var c=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(s.body);var f=a||c;var v=s.body.indexOf(",")>=0;if(!f&&!v)return s.post.match(/,.*\}/)?(e=s.pre+"{"+s.body+u+s.post,t(e)):[e];var b;if(f)b=s.body.split(/\.\./);else if(1===(b=function t(e){if(!e)return[""];var r=[];var n=i("{","}",e);if(!n)return e.split(",");var o=n.pre;var s=n.body;var u=n.post;var a=o.split(",");a[a.length-1]+="{"+s+"}";var c=t(u);u.length&&(a[a.length-1]+=c.shift(),a.push.apply(a,c));r.push.apply(r,a);return r}(s.body)).length&&1===(b=t(b[0],!1).map(l)).length){var m=s.post.length?t(s.post,!1):[""];return m.map(function(t){return s.pre+b[0]+t})}var y=s.pre;var m=s.post.length?t(s.post,!1):[""];var w;if(f){var j=h(b[0]),x=h(b[1]),O=Math.max(b[0].length,b[1].length),M=3==b.length?Math.abs(h(b[2])):1,A=d,E=x<j;E&&(M*=-1,A=g);var _=b.some(p);w=[];for(var T=j;A(T,x);T+=M){var k;if(c)"\\"===(k=String.fromCharCode(T))&&(k="");else if(k=String(T),_){var S=O-k.length;if(S>0){var R=new Array(S+1).join("0");k=T<0?"-"+R+k.slice(1):R+k}}w.push(k)}}else w=n(b,function(e){return t(e,!1)});for(var $=0;$<w.length;$++)for(var P=0;P<m.length;P++){var L=y+w[$]+m[P];(!r||f||L)&&o.push(L)}return o}(function(t){return t.split("\\\\").join(o).split("\\{").join(s).split("\\}").join(u).split("\\,").join(a).split("\\.").join(c)}(t),!0).map(f)};var o="\0SLASH"+Math.random()+"\0",s="\0OPEN"+Math.random()+"\0",u="\0CLOSE"+Math.random()+"\0",a="\0COMMA"+Math.random()+"\0",c="\0PERIOD"+Math.random()+"\0";function h(t){return parseInt(t,10)==t?parseInt(t,10):t.charCodeAt(0)}function f(t){return t.split(o).join("\\").split(s).join("{").split(u).join("}").split(a).join(",").split(c).join(".")}function l(t){return"{"+t+"}"}function p(t){return/^-?0\d/.test(t)}function d(t,e){return t<=e}function g(t,e){return t>=e}},function(t,e){var r,n,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(t){if(r===setTimeout)return setTimeout(t,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(t){r=o}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(t){n=s}}();var a,c=[],h=!1,f=-1;function l(){h&&a&&(h=!1,a.length?c=a.concat(c):f=-1,c.length&&p())}function p(){if(!h){var t=u(l);h=!0;for(var e=c.length;e;){for(a=c,c=[];++f<e;)a&&a[f].run();f=-1,e=c.length}a=null,h=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new d(t,e)),1!==c.length||h||u(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,r){(function(t){function r(t,e){for(var r=0,n=t.length-1;n>=0;n--){var i=t[n];"."===i?t.splice(n,1):".."===i?(t.splice(n,1),r++):r&&(t.splice(n,1),r--)}if(e)for(;r--;r)t.unshift("..");return t}var n=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,i=function(t){return n.exec(t).slice(1)};function o(t,e){if(t.filter)return t.filter(e);for(var r=[],n=0;n<t.length;n++)e(t[n],n,t)&&r.push(t[n]);return r}e.resolve=function(){for(var e="",n=!1,i=arguments.length-1;i>=-1&&!n;i--){var s=i>=0?arguments[i]:t.cwd();if("string"!=typeof s)throw new TypeError("Arguments to path.resolve must be strings");s&&(e=s+"/"+e,n="/"===s.charAt(0))}return e=r(o(e.split("/"),function(t){return!!t}),!n).join("/"),(n?"/":"")+e||"."},e.normalize=function(t){var n=e.isAbsolute(t),i="/"===s(t,-1);return(t=r(o(t.split("/"),function(t){return!!t}),!n).join("/"))||n||(t="."),t&&i&&(t+="/"),(n?"/":"")+t},e.isAbsolute=function(t){return"/"===t.charAt(0)},e.join=function(){var t=Array.prototype.slice.call(arguments,0);return e.normalize(o(t,function(t,e){if("string"!=typeof t)throw new TypeError("Arguments to path.join must be strings");return t}).join("/"))},e.relative=function(t,r){function n(t){for(var e=0;e<t.length&&""===t[e];e++);for(var r=t.length-1;r>=0&&""===t[r];r--);return e>r?[]:t.slice(e,r-e+1)}t=e.resolve(t).substr(1),r=e.resolve(r).substr(1);for(var i=n(t.split("/")),o=n(r.split("/")),s=Math.min(i.length,o.length),u=s,a=0;a<s;a++)if(i[a]!==o[a]){u=a;break}var c=[];for(a=u;a<i.length;a++)c.push("..");return(c=c.concat(o.slice(u))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(t){var e=i(t),r=e[0],n=e[1];return r||n?(n&&(n=n.substr(0,n.length-1)),r+n):"."},e.basename=function(t,e){var r=i(t)[2];return e&&r.substr(-1*e.length)===e&&(r=r.substr(0,r.length-e.length)),r},e.extname=function(t){return i(t)[3]};var s="b"==="ab".substr(-1)?function(t,e,r){return t.substr(e,r)}:function(t,e,r){return e<0&&(e=t.length+e),t.substr(e,r)}}).call(this,r(3))},function(t,e,r){t.exports=d,d.Minimatch=g;var n={sep:"/"};try{n=r(4)}catch(t){}var i=d.GLOBSTAR=g.GLOBSTAR={},o=r(2),s={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},u="[^/]",a=u+"*?",c="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",h="(?:(?!(?:\\/|^)\\.).)*?",f="().*{}+?[]^$\\!".split("").reduce(function(t,e){return t[e]=!0,t},{});var l=/\/+/;function p(t,e){t=t||{},e=e||{};var r={};return Object.keys(e).forEach(function(t){r[t]=e[t]}),Object.keys(t).forEach(function(e){r[e]=t[e]}),r}function d(t,e,r){if("string"!=typeof e)throw new TypeError("glob pattern string required");return r||(r={}),!(!r.nocomment&&"#"===e.charAt(0))&&(""===e.trim()?""===t:new g(e,r).match(t))}function g(t,e){if(!(this instanceof g))return new g(t,e);if("string"!=typeof t)throw new TypeError("glob pattern string required");e||(e={}),t=t.trim(),"/"!==n.sep&&(t=t.split(n.sep).join("/")),this.options=e,this.set=[],this.pattern=t,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.make()}function v(t,e){if(e||(e=this instanceof g?this.options:{}),void 0===(t=void 0===t?this.pattern:t))throw new TypeError("undefined pattern");return e.nobrace||!t.match(/\{.*\}/)?[t]:o(t)}d.filter=function(t,e){return e=e||{},function(r,n,i){return d(r,t,e)}},d.defaults=function(t){if(!t||!Object.keys(t).length)return d;var e=d,r=function(r,n,i){return e.minimatch(r,n,p(t,i))};return r.Minimatch=function(r,n){return new e.Minimatch(r,p(t,n))},r},g.defaults=function(t){return t&&Object.keys(t).length?d.defaults(t).Minimatch:g},g.prototype.debug=function(){},g.prototype.make=function(){if(this._made)return;var t=this.pattern,e=this.options;if(!e.nocomment&&"#"===t.charAt(0))return void(this.comment=!0);if(!t)return void(this.empty=!0);this.parseNegate();var r=this.globSet=this.braceExpand();e.debug&&(this.debug=console.error);this.debug(this.pattern,r),r=this.globParts=r.map(function(t){return t.split(l)}),this.debug(this.pattern,r),r=r.map(function(t,e,r){return t.map(this.parse,this)},this),this.debug(this.pattern,r),r=r.filter(function(t){return-1===t.indexOf(!1)}),this.debug(this.pattern,r),this.set=r},g.prototype.parseNegate=function(){var t=this.pattern,e=!1,r=0;if(this.options.nonegate)return;for(var n=0,i=t.length;n<i&&"!"===t.charAt(n);n++)e=!e,r++;r&&(this.pattern=t.substr(r));this.negate=e},d.braceExpand=function(t,e){return v(t,e)},g.prototype.braceExpand=v,g.prototype.parse=function(t,e){if(t.length>65536)throw new TypeError("pattern is too long");var r=this.options;if(!r.noglobstar&&"**"===t)return i;if(""===t)return"";var n,o="",c=!!r.nocase,h=!1,l=[],p=[],d=!1,g=-1,v=-1,m="."===t.charAt(0)?"":r.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",y=this;function w(){if(n){switch(n){case"*":o+=a,c=!0;break;case"?":o+=u,c=!0;break;default:o+="\\"+n}y.debug("clearStateChar %j %j",n,o),n=!1}}for(var j,x=0,O=t.length;x<O&&(j=t.charAt(x));x++)if(this.debug("%s\t%s %s %j",t,x,o,j),h&&f[j])o+="\\"+j,h=!1;else switch(j){case"/":return!1;case"\\":w(),h=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",t,x,o,j),d){this.debug("  in class"),"!"===j&&x===v+1&&(j="^"),o+=j;continue}y.debug("call clearStateChar %j",n),w(),n=j,r.noext&&w();continue;case"(":if(d){o+="(";continue}if(!n){o+="\\(";continue}l.push({type:n,start:x-1,reStart:o.length,open:s[n].open,close:s[n].close}),o+="!"===n?"(?:(?!(?:":"(?:",this.debug("plType %j %j",n,o),n=!1;continue;case")":if(d||!l.length){o+="\\)";continue}w(),c=!0;var M=l.pop();o+=M.close,"!"===M.type&&p.push(M),M.reEnd=o.length;continue;case"|":if(d||!l.length||h){o+="\\|",h=!1;continue}w(),o+="|";continue;case"[":if(w(),d){o+="\\"+j;continue}d=!0,v=x,g=o.length,o+=j;continue;case"]":if(x===v+1||!d){o+="\\"+j,h=!1;continue}if(d){var A=t.substring(v+1,x);try{RegExp("["+A+"]")}catch(t){var E=this.parse(A,b);o=o.substr(0,g)+"\\["+E[0]+"\\]",c=c||E[1],d=!1;continue}}c=!0,d=!1,o+=j;continue;default:w(),h?h=!1:!f[j]||"^"===j&&d||(o+="\\"),o+=j}d&&(A=t.substr(v+1),E=this.parse(A,b),o=o.substr(0,g)+"\\["+E[0],c=c||E[1]);for(M=l.pop();M;M=l.pop()){var _=o.slice(M.reStart+M.open.length);this.debug("setting tail",o,M),_=_.replace(/((?:\\{2}){0,64})(\\?)\|/g,function(t,e,r){return r||(r="\\"),e+e+r+"|"}),this.debug("tail=%j\n   %s",_,_,M,o);var T="*"===M.type?a:"?"===M.type?u:"\\"+M.type;c=!0,o=o.slice(0,M.reStart)+T+"\\("+_}w(),h&&(o+="\\\\");var k=!1;switch(o.charAt(0)){case".":case"[":case"(":k=!0}for(var S=p.length-1;S>-1;S--){var R=p[S],$=o.slice(0,R.reStart),P=o.slice(R.reStart,R.reEnd-8),L=o.slice(R.reEnd-8,R.reEnd),C=o.slice(R.reEnd);L+=C;var H=$.split("(").length-1,N=C;for(x=0;x<H;x++)N=N.replace(/\)[+*?]?/,"");var z="";""===(C=N)&&e!==b&&(z="$");var B=$+P+C+z+L;o=B}""!==o&&c&&(o="(?=.)"+o);k&&(o=m+o);if(e===b)return[o,c];if(!c)return t.replace(/\\(.)/g,"$1");var G=r.nocase?"i":"";try{var I=new RegExp("^"+o+"$",G)}catch(t){return new RegExp("$.")}return I._glob=t,I._src=o,I};var b={};d.makeRe=function(t,e){return new g(t,e||{}).makeRe()},g.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var t=this.set;if(!t.length)return this.regexp=!1,this.regexp;var e=this.options,r=e.noglobstar?a:e.dot?c:h,n=e.nocase?"i":"",o=t.map(function(t){return t.map(function(t){return t===i?r:"string"==typeof t?t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"):t._src}).join("\\/")}).join("|");o="^(?:"+o+")$",this.negate&&(o="^(?!"+o+").*$");try{this.regexp=new RegExp(o,n)}catch(t){this.regexp=!1}return this.regexp},d.match=function(t,e,r){var n=new g(e,r=r||{});return t=t.filter(function(t){return n.match(t)}),n.options.nonull&&!t.length&&t.push(e),t},g.prototype.match=function(t,e){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return""===t;if("/"===t&&e)return!0;var r=this.options;"/"!==n.sep&&(t=t.split(n.sep).join("/"));t=t.split(l),this.debug(this.pattern,"split",t);var i,o,s=this.set;for(this.debug(this.pattern,"set",s),o=t.length-1;o>=0&&!(i=t[o]);o--);for(o=0;o<s.length;o++){var u=s[o],a=t;r.matchBase&&1===u.length&&(a=[i]);var c=this.matchOne(a,u,e);if(c)return!!r.flipNegate||!this.negate}return!r.flipNegate&&this.negate},g.prototype.matchOne=function(t,e,r){var n=this.options;this.debug("matchOne",{this:this,file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var o=0,s=0,u=t.length,a=e.length;o<u&&s<a;o++,s++){this.debug("matchOne loop");var c,h=e[s],f=t[o];if(this.debug(e,h,f),!1===h)return!1;if(h===i){this.debug("GLOBSTAR",[e,h,f]);var l=o,p=s+1;if(p===a){for(this.debug("** at the end");o<u;o++)if("."===t[o]||".."===t[o]||!n.dot&&"."===t[o].charAt(0))return!1;return!0}for(;l<u;){var d=t[l];if(this.debug("\nglobstar while",t,l,e,p,d),this.matchOne(t.slice(l),e.slice(p),r))return this.debug("globstar found match!",l,u,d),!0;if("."===d||".."===d||!n.dot&&"."===d.charAt(0)){this.debug("dot detected!",t,l,e,p);break}this.debug("globstar swallow a segment, and continue"),l++}return!(!r||(this.debug("\n>>> no match, partial?",t,l,e,p),l!==u))}if("string"==typeof h?(c=n.nocase?f.toLowerCase()===h.toLowerCase():f===h,this.debug("string match",h,f,c)):(c=f.match(h),this.debug("pattern match",h,f,c)),!c)return!1}if(o===u&&s===a)return!0;if(o===u)return r;if(s===a)return o===u-1&&""===t[o];throw new Error("wtf?")}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.prototype.use=function(t){var e,r=this;this.go=(e=this.go,function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return e.apply(void 0,n.slice(0,-1).concat([function(){var e=n[n.length-1];t.apply(r,n.slice(0,-1).concat([e.bind.apply(e,[null].concat(n.slice(0,-1)))]))}]))})},t.prototype.go=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];t[t.length-1].apply(this,t.slice(0,-1))},t}();e.MiddlewareHolder=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(6),i=r(5),o=function(){function t(){this._providers=[],this._middleware=[],this._setMiddleware=new n.MiddlewareHolder,this._getMiddleware=new n.MiddlewareHolder,this._deleteMiddleware=new n.MiddlewareHolder}return t.prototype.registerProvider=function(t){this._providers.push(t)},t.prototype.use=function(t,e){var r=this;this._middleware.push(e),this._setMiddleware.use(function(n,i){return r.checkRoute(t,n,i,function(t,r){return e.set(t,r)})}),this._getMiddleware.use(function(n,i){return r.checkRoute(t,n,i,function(t,r){return e.get(t,r)})}),this._deleteMiddleware.use(function(n,i){return r.checkRoute(t,n,i,function(t,r){return e.delete?e.delete(t,r):r()})})},t.prototype.checkRoute=function(t,e,r,n){i(e.name,t)?n(e,r):r()},t.prototype.set=function(t,e){var r=this;this._setMiddleware.go({origin:e,content:e,name:t},function(e){r._providers.forEach(function(r){return r.set(t,e.content)})})},t.prototype.get=function(t,e){var r=this;this.lastProvider.get(t).then(function(n){r._getMiddleware.go({origin:n,content:n,name:t},function(t){e(t)})})},t.prototype.delete=function(t,e){var r=this;this.lastProvider.delete(t).then(function(n){r._deleteMiddleware.go({name:t},e||function(t){})})},Object.defineProperty(t.prototype,"lastProvider",{get:function(){return this._providers[this._providers.length-1]},enumerable:!0,configurable:!0}),t}();e.Application=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(7);e.ss=new n.Application}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFsYW5jZWQtbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbmNhdC1tYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JyYWNlLWV4cGFuc2lvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmltYXRjaC9taW5pbWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21pZGRsZXdhcmUtaG9sZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiYSIsImkiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImJhbGFuY2VkIiwiYiIsInN0ciIsIlJlZ0V4cCIsIm1heWJlTWF0Y2giLCJyYW5nZSIsInN0YXJ0IiwiZW5kIiwicHJlIiwic2xpY2UiLCJib2R5IiwibGVuZ3RoIiwicG9zdCIsInJlZyIsIm1hdGNoIiwiYmVncyIsImJlZyIsImxlZnQiLCJyaWdodCIsInJlc3VsdCIsImFpIiwiaW5kZXhPZiIsImJpIiwicHVzaCIsInBvcCIsInhzIiwiZm4iLCJyZXMiLCJ4IiwiaXNBcnJheSIsImFwcGx5IiwiQXJyYXkiLCJ0b1N0cmluZyIsImNvbmNhdE1hcCIsInN1YnN0ciIsImV4cGFuZCIsImlzVG9wIiwiZXhwYW5zaW9ucyIsInRlc3QiLCJpc051bWVyaWNTZXF1ZW5jZSIsImlzQWxwaGFTZXF1ZW5jZSIsImlzU2VxdWVuY2UiLCJpc09wdGlvbnMiLCJlc2NDbG9zZSIsInNwbGl0IiwicGFyc2VDb21tYVBhcnRzIiwicGFydHMiLCJwb3N0UGFydHMiLCJzaGlmdCIsIm1hcCIsImVtYnJhY2UiLCJOIiwibnVtZXJpYyIsInkiLCJ3aWR0aCIsIk1hdGgiLCJtYXgiLCJpbmNyIiwiYWJzIiwibHRlIiwicmV2ZXJzZSIsImd0ZSIsInBhZCIsInNvbWUiLCJpc1BhZGRlZCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIm5lZWQiLCJ6Iiwiam9pbiIsImVsIiwiaiIsImsiLCJleHBhbnNpb24iLCJlc2NTbGFzaCIsImVzY09wZW4iLCJlc2NDb21tYSIsImVzY1BlcmlvZCIsImVzY2FwZUJyYWNlcyIsInVuZXNjYXBlQnJhY2VzIiwicmFuZG9tIiwicGFyc2VJbnQiLCJjaGFyQ29kZUF0IiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJlIiwidGhpcyIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiY29uY2F0IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwibmV4dFRpY2siLCJhcmdzIiwiYXJndW1lbnRzIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwibm9ybWFsaXplQXJyYXkiLCJhbGxvd0Fib3ZlUm9vdCIsInVwIiwibGFzdCIsInNwbGljZSIsInVuc2hpZnQiLCJzcGxpdFBhdGhSZSIsInNwbGl0UGF0aCIsImZpbGVuYW1lIiwiZXhlYyIsImZpbHRlciIsImYiLCJyZXNvbHZlIiwicmVzb2x2ZWRQYXRoIiwicmVzb2x2ZWRBYnNvbHV0ZSIsInBhdGgiLCJUeXBlRXJyb3IiLCJjaGFyQXQiLCJub3JtYWxpemUiLCJpc0Fic29sdXRlIiwidHJhaWxpbmdTbGFzaCIsInBhdGhzIiwiaW5kZXgiLCJyZWxhdGl2ZSIsImZyb20iLCJ0byIsInRyaW0iLCJhcnIiLCJmcm9tUGFydHMiLCJ0b1BhcnRzIiwibWluIiwic2FtZVBhcnRzTGVuZ3RoIiwib3V0cHV0UGFydHMiLCJzZXAiLCJkZWxpbWl0ZXIiLCJkaXJuYW1lIiwiYmFzZW5hbWUiLCJleHQiLCJleHRuYW1lIiwibWluaW1hdGNoIiwiTWluaW1hdGNoIiwiZXIiLCJHTE9CU1RBUiIsInBsVHlwZXMiLCIhIiwib3BlbiIsImNsb3NlIiwiPyIsIisiLCIqIiwiQCIsInFtYXJrIiwic3RhciIsInR3b1N0YXJEb3QiLCJ0d29TdGFyTm9Eb3QiLCJyZVNwZWNpYWxzIiwicmVkdWNlIiwic2V0Iiwic2xhc2hTcGxpdCIsInQiLCJrZXlzIiwiZm9yRWFjaCIsInBhdHRlcm4iLCJvcHRpb25zIiwibm9jb21tZW50IiwicmVnZXhwIiwibmVnYXRlIiwiY29tbWVudCIsImVtcHR5IiwibWFrZSIsImJyYWNlRXhwYW5kIiwibm9icmFjZSIsImxpc3QiLCJkZWZhdWx0cyIsImRlZiIsIm9yaWciLCJkZWJ1ZyIsIl9tYWRlIiwicGFyc2VOZWdhdGUiLCJnbG9iU2V0IiwiY29uc29sZSIsImVycm9yIiwiZ2xvYlBhcnRzIiwic2kiLCJwYXJzZSIsIm5lZ2F0ZU9mZnNldCIsIm5vbmVnYXRlIiwiaXNTdWIiLCJub2dsb2JzdGFyIiwic3RhdGVDaGFyIiwicmUiLCJoYXNNYWdpYyIsIm5vY2FzZSIsImVzY2FwaW5nIiwicGF0dGVybkxpc3RTdGFjayIsIm5lZ2F0aXZlTGlzdHMiLCJpbkNsYXNzIiwicmVDbGFzc1N0YXJ0IiwiY2xhc3NTdGFydCIsInBhdHRlcm5TdGFydCIsImRvdCIsInNlbGYiLCJjbGVhclN0YXRlQ2hhciIsIm5vZXh0IiwidHlwZSIsInJlU3RhcnQiLCJwbCIsInJlRW5kIiwiY3MiLCJzdWJzdHJpbmciLCJzcCIsIlNVQlBBUlNFIiwidGFpbCIsInJlcGxhY2UiLCJfIiwiJDEiLCIkMiIsImFkZFBhdHRlcm5TdGFydCIsIm5sIiwibmxCZWZvcmUiLCJubEZpcnN0IiwibmxMYXN0IiwibmxBZnRlciIsIm9wZW5QYXJlbnNCZWZvcmUiLCJjbGVhbkFmdGVyIiwiZG9sbGFyIiwibmV3UmUiLCJmbGFncyIsInJlZ0V4cCIsIl9nbG9iIiwiX3NyYyIsIm1ha2VSZSIsInR3b1N0YXIiLCJleCIsIm1tIiwibm9udWxsIiwicGFydGlhbCIsImZpbGUiLCJtYXRjaEJhc2UiLCJoaXQiLCJtYXRjaE9uZSIsImZsaXBOZWdhdGUiLCJmaSIsInBpIiwiZmwiLCJmciIsInByIiwic3dhbGxvd2VlIiwidG9Mb3dlckNhc2UiLCJNaWRkbGV3YXJlSG9sZGVyIiwidXNlIiwic3RhY2siLCJfdGhpcyIsImdvIiwiX2kiLCJfbmV4dCIsImJpbmQiLCJtaWRkbGV3YXJlX2hvbGRlcl8xIiwiQXBwbGljYXRpb24iLCJfcHJvdmlkZXJzIiwiX21pZGRsZXdhcmUiLCJfc2V0TWlkZGxld2FyZSIsIl9nZXRNaWRkbGV3YXJlIiwiX2RlbGV0ZU1pZGRsZXdhcmUiLCJyZWdpc3RlclByb3ZpZGVyIiwicHJvdmlkZXIiLCJtaWRkbGV3YXJlIiwibmV4dCIsImNoZWNrUm91dGUiLCJkZWxldGUiLCJiYXNpY0luZm8iLCJjb250ZW50Iiwib3JpZ2luIiwic3RvcmFnZUluZm8iLCJsYXN0UHJvdmlkZXIiLCJ0aGVuIiwic3MiLCJhcHBsaWNhdGlvbl8xIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLG9CQUFBQyxTQUFBLGlCQUFBQyxPQUNBQSxPQUFBRCxRQUFBRCxTQUNBLHNCQUFBRyxlQUFBQyxJQUNBRCxVQUFBSCxPQUNBLENBQ0EsSUFBQUssRUFBQUwsSUFDQSxRQUFBTSxLQUFBRCxHQUFBLGlCQUFBSixnQkFBQUYsR0FBQU8sR0FBQUQsRUFBQUMsSUFQQSxDQVNDQyxPQUFBLFdBQ0QsbUJDVEEsSUFBQUMsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQVQsUUFHQSxJQUFBQyxFQUFBTSxFQUFBRSxJQUNBSixFQUFBSSxFQUNBQyxHQUFBLEVBQ0FWLFlBVUEsT0FOQVcsRUFBQUYsR0FBQUcsS0FBQVgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQVEsR0FHQVAsRUFBQVMsR0FBQSxFQUdBVCxFQUFBRCxRQTJDQSxPQXRDQVEsRUFBQUssRUFBQUYsRUFHQUgsRUFBQU0sRUFBQVAsRUFHQUMsRUFBQU8sRUFBQSxTQUFBZixFQUFBZ0IsRUFBQUMsR0FDQVQsRUFBQVUsRUFBQWxCLEVBQUFnQixJQUNBRyxPQUFBQyxlQUFBcEIsRUFBQWdCLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BVCxFQUFBZ0IsRUFBQSxTQUFBeEIsR0FDQW1CLE9BQUFDLGVBQUFwQixFQUFBLGNBQWlEeUIs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QU8sU0FBQ3FVLEdBRXJFckIsRUFBS08sV0FBV2xHLFFBQVEsU0FBQXJNLEdBQUssT0FBQUEsRUFBRWlNLElBQUlqTixFQUFNcVUsRUFBWUYsY0FJN0RiLEVBQUF4UyxVQUFBUCxJQUFBLFNBQUlQLEVBQWM0QyxHQUFsQixJQUFBb1EsRUFBQWpNLEtBQ0lBLEtBQUt1TixhQUFhL1QsSUFBSVAsR0FBTXVVLEtBQUssU0FBQXRULEdBQzdCK1IsRUFBS1UsZUFBZVQsSUFBSW1CLE9BQVFuVCxFQUFHa1QsUUFBU2xULEVBQUdqQixLQUFNQSxHQUFPLFNBQUNxVSxHQUN6RHpSLEVBQUd5UixRQUtmZixFQUFBeFMsVUFBQW1ULE9BQUEsU0FBT2pVLEVBQWM0QyxHQUFyQixJQUFBb1EsRUFBQWpNLEtBQ0lBLEtBQUt1TixhQUFhTCxPQUFPalUsR0FBTXVVLEtBQUssU0FBQXRULEdBQ2hDK1IsRUFBS1csa0JBQWtCVixJQUFJalQsS0FBTUEsR0FBTzRDLEdBQVUsU0FBQzRSLFNBSTNEclUsT0FBQUMsZUFBWWtULEVBQUF4UyxVQUFBLG9CQUFaLFdBQ0ksT0FBT2lHLEtBQUt3TSxXQUFXeE0sS0FBS3dNLFdBQVcxUixPQUFTLG9DQUd4RHlSLEVBL0RBLEdBQWF0VSxFQUFBc1UsNkZDTGIsSUFBQW1CLEVBQUFqVixFQUFBLEdBRWFSLEVBQUF3VixHQUFLLElBQUlDLEVBQUFuQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gOCk7XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGJhbGFuY2VkO1xuZnVuY3Rpb24gYmFsYW5jZWQoYSwgYiwgc3RyKSB7XG4gIGlmIChhIGluc3RhbmNlb2YgUmVnRXhwKSBhID0gbWF5YmVNYXRjaChhLCBzdHIpO1xuICBpZiAoYiBpbnN0YW5jZW9mIFJlZ0V4cCkgYiA9IG1heWJlTWF0Y2goYiwgc3RyKTtcblxuICB2YXIgciA9IHJhbmdlKGEsIGIsIHN0cik7XG5cbiAgcmV0dXJuIHIgJiYge1xuICAgIHN0YXJ0OiByWzBdLFxuICAgIGVuZDogclsxXSxcbiAgICBwcmU6IHN0ci5zbGljZSgwLCByWzBdKSxcbiAgICBib2R5OiBzdHIuc2xpY2UoclswXSArIGEubGVuZ3RoLCByWzFdKSxcbiAgICBwb3N0OiBzdHIuc2xpY2UoclsxXSArIGIubGVuZ3RoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBtYXliZU1hdGNoKHJlZywgc3RyKSB7XG4gIHZhciBtID0gc3RyLm1hdGNoKHJlZyk7XG4gIHJldHVybiBtID8gbVswXSA6IG51bGw7XG59XG5cbmJhbGFuY2VkLnJhbmdlID0gcmFuZ2U7XG5mdW5jdGlvbiByYW5nZShhLCBiLCBzdHIpIHtcbiAgdmFyIGJlZ3MsIGJlZywgbGVmdCwgcmlnaHQsIHJlc3VsdDtcbiAgdmFyIGFpID0gc3RyLmluZGV4T2YoYSk7XG4gIHZhciBiaSA9IHN0ci5pbmRleE9mKGIsIGFpICsgMSk7XG4gIHZhciBpID0gYWk7XG5cbiAgaWYgKGFpID49IDAgJiYgYmkgPiAwKSB7XG4gICAgYmVncyA9IFtdO1xuICAgIGxlZnQgPSBzdHIubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPj0gMCAmJiAhcmVzdWx0KSB7XG4gICAgICBpZiAoaSA9PSBhaSkge1xuICAgICAgICBiZWdzLnB1c2goaSk7XG4gICAgICAgIGFpID0gc3RyLmluZGV4T2YoYSwgaSArIDEpO1xuICAgICAgfSBlbHNlIGlmIChiZWdzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIHJlc3VsdCA9IFsgYmVncy5wb3AoKSwgYmkgXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJlZyA9IGJlZ3MucG9wKCk7XG4gICAgICAgIGlmIChiZWcgPCBsZWZ0KSB7XG4gICAgICAgICAgbGVmdCA9IGJlZztcbiAgICAgICAgICByaWdodCA9IGJpO1xuICAgICAgICB9XG5cbiAgICAgICAgYmkgPSBzdHIuaW5kZXhPZihiLCBpICsgMSk7XG4gICAgICB9XG5cbiAgICAgIGkgPSBhaSA8IGJpICYmIGFpID49IDAgPyBhaSA6IGJpO1xuICAgIH1cblxuICAgIGlmIChiZWdzLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ID0gWyBsZWZ0LCByaWdodCBdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4cywgZm4pIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgeCA9IGZuKHhzW2ldLCBpKTtcbiAgICAgICAgaWYgKGlzQXJyYXkoeCkpIHJlcy5wdXNoLmFwcGx5KHJlcywgeCk7XG4gICAgICAgIGVsc2UgcmVzLnB1c2goeCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIGNvbmNhdE1hcCA9IHJlcXVpcmUoJ2NvbmNhdC1tYXAnKTtcbnZhciBiYWxhbmNlZCA9IHJlcXVpcmUoJ2JhbGFuY2VkLW1hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwYW5kVG9wO1xuXG52YXIgZXNjU2xhc2ggPSAnXFwwU0xBU0gnK01hdGgucmFuZG9tKCkrJ1xcMCc7XG52YXIgZXNjT3BlbiA9ICdcXDBPUEVOJytNYXRoLnJhbmRvbSgpKydcXDAnO1xudmFyIGVzY0Nsb3NlID0gJ1xcMENMT1NFJytNYXRoLnJhbmRvbSgpKydcXDAnO1xudmFyIGVzY0NvbW1hID0gJ1xcMENPTU1BJytNYXRoLnJhbmRvbSgpKydcXDAnO1xudmFyIGVzY1BlcmlvZCA9ICdcXDBQRVJJT0QnK01hdGgucmFuZG9tKCkrJ1xcMCc7XG5cbmZ1bmN0aW9uIG51bWVyaWMoc3RyKSB7XG4gIHJldHVybiBwYXJzZUludChzdHIsIDEwKSA9PSBzdHJcbiAgICA/IHBhcnNlSW50KHN0ciwgMTApXG4gICAgOiBzdHIuY2hhckNvZGVBdCgwKTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlQnJhY2VzKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KCdcXFxcXFxcXCcpLmpvaW4oZXNjU2xhc2gpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcXFx7Jykuam9pbihlc2NPcGVuKVxuICAgICAgICAgICAgLnNwbGl0KCdcXFxcfScpLmpvaW4oZXNjQ2xvc2UpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcXFwsJykuam9pbihlc2NDb21tYSlcbiAgICAgICAgICAgIC5zcGxpdCgnXFxcXC4nKS5qb2luKGVzY1BlcmlvZCk7XG59XG5cbmZ1bmN0aW9uIHVuZXNjYXBlQnJhY2VzKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KGVzY1NsYXNoKS5qb2luKCdcXFxcJylcbiAgICAgICAgICAgIC5zcGxpdChlc2NPcGVuKS5qb2luKCd7JylcbiAgICAgICAgICAgIC5zcGxpdChlc2NDbG9zZSkuam9pbignfScpXG4gICAgICAgICAgICAuc3BsaXQoZXNjQ29tbWEpLmpvaW4oJywnKVxuICAgICAgICAgICAgLnNwbGl0KGVzY1BlcmlvZCkuam9pbignLicpO1xufVxuXG5cbi8vIEJhc2ljYWxseSBqdXN0IHN0ci5zcGxpdChcIixcIiksIGJ1dCBoYW5kbGluZyBjYXNlc1xuLy8gd2hlcmUgd2UgaGF2ZSBuZXN0ZWQgYnJhY2VkIHNlY3Rpb25zLCB3aGljaCBzaG91bGQgYmVcbi8vIHRyZWF0ZWQgYXMgaW5kaXZpZHVhbCBtZW1iZXJzLCBsaWtlIHthLHtiLGN9LGR9XG5mdW5jdGlvbiBwYXJzZUNvbW1hUGFydHMoc3RyKSB7XG4gIGlmICghc3RyKVxuICAgIHJldHVybiBbJyddO1xuXG4gIHZhciBwYXJ0cyA9IFtdO1xuICB2YXIgbSA9IGJhbGFuY2VkKCd7JywgJ30nLCBzdHIpO1xuXG4gIGlmICghbSlcbiAgICByZXR1cm4gc3RyLnNwbGl0KCcsJyk7XG5cbiAgdmFyIHByZSA9IG0ucHJlO1xuICB2YXIgYm9keSA9IG0uYm9keTtcbiAgdmFyIHBvc3QgPSBtLnBvc3Q7XG4gIHZhciBwID0gcHJlLnNwbGl0KCcsJyk7XG5cbiAgcFtwLmxlbmd0aC0xXSArPSAneycgKyBib2R5ICsgJ30nO1xuICB2YXIgcG9zdFBhcnRzID0gcGFyc2VDb21tYVBhcnRzKHBvc3QpO1xuICBpZiAocG9zdC5sZW5ndGgpIHtcbiAgICBwW3AubGVuZ3RoLTFdICs9IHBvc3RQYXJ0cy5zaGlmdCgpO1xuICAgIHAucHVzaC5hcHBseShwLCBwb3N0UGFydHMpO1xuICB9XG5cbiAgcGFydHMucHVzaC5hcHBseShwYXJ0cywgcCk7XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG5mdW5jdGlvbiBleHBhbmRUb3Aoc3RyKSB7XG4gIGlmICghc3RyKVxuICAgIHJldHVybiBbXTtcblxuICAvLyBJIGRvbid0IGtub3cgd2h5IEJhc2ggNC4zIGRvZXMgdGhpcywgYnV0IGl0IGRvZXMuXG4gIC8vIEFueXRoaW5nIHN0YXJ0aW5nIHdpdGgge30gd2lsbCBoYXZlIHRoZSBmaXJzdCB0d28gYnl0ZXMgcHJlc2VydmVkXG4gIC8vIGJ1dCAqb25seSogYXQgdGhlIHRvcCBsZXZlbCwgc28ge30sYX1iIHdpbGwgbm90IGV4cGFuZCB0byBhbnl0aGluZyxcbiAgLy8gYnV0IGF7fSxifWMgd2lsbCBiZSBleHBhbmRlZCB0byBbYX1jLGFiY10uXG4gIC8vIE9uZSBjb3VsZCBhcmd1ZSB0aGF0IHRoaXMgaXMgYSBidWcgaW4gQmFzaCwgYnV0IHNpbmNlIHRoZSBnb2FsIG9mXG4gIC8vIHRoaXMgbW9kdWxlIGlzIHRvIG1hdGNoIEJhc2gncyBydWxlcywgd2UgZXNjYXBlIGEgbGVhZGluZyB7fVxuICBpZiAoc3RyLnN1YnN0cigwLCAyKSA9PT0gJ3t9Jykge1xuICAgIHN0ciA9ICdcXFxce1xcXFx9JyArIHN0ci5zdWJzdHIoMik7XG4gIH1cblxuICByZXR1cm4gZXhwYW5kKGVzY2FwZUJyYWNlcyhzdHIpLCB0cnVlKS5tYXAodW5lc2NhcGVCcmFjZXMpO1xufVxuXG5mdW5jdGlvbiBpZGVudGl0eShlKSB7XG4gIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBlbWJyYWNlKHN0cikge1xuICByZXR1cm4gJ3snICsgc3RyICsgJ30nO1xufVxuZnVuY3Rpb24gaXNQYWRkZWQoZWwpIHtcbiAgcmV0dXJuIC9eLT8wXFxkLy50ZXN0KGVsKTtcbn1cblxuZnVuY3Rpb24gbHRlKGksIHkpIHtcbiAgcmV0dXJuIGkgPD0geTtcbn1cbmZ1bmN0aW9uIGd0ZShpLCB5KSB7XG4gIHJldHVybiBpID49IHk7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZChzdHIsIGlzVG9wKSB7XG4gIHZhciBleHBhbnNpb25zID0gW107XG5cbiAgdmFyIG0gPSBiYWxhbmNlZCgneycsICd9Jywgc3RyKTtcbiAgaWYgKCFtIHx8IC9cXCQkLy50ZXN0KG0ucHJlKSkgcmV0dXJuIFtzdHJdO1xuXG4gIHZhciBpc051bWVyaWNTZXF1ZW5jZSA9IC9eLT9cXGQrXFwuXFwuLT9cXGQrKD86XFwuXFwuLT9cXGQrKT8kLy50ZXN0KG0uYm9keSk7XG4gIHZhciBpc0FscGhhU2VxdWVuY2UgPSAvXlthLXpBLVpdXFwuXFwuW2EtekEtWl0oPzpcXC5cXC4tP1xcZCspPyQvLnRlc3QobS5ib2R5KTtcbiAgdmFyIGlzU2VxdWVuY2UgPSBpc051bWVyaWNTZXF1ZW5jZSB8fCBpc0FscGhhU2VxdWVuY2U7XG4gIHZhciBpc09wdGlvbnMgPSBtLmJvZHkuaW5kZXhPZignLCcpID49IDA7XG4gIGlmICghaXNTZXF1ZW5jZSAmJiAhaXNPcHRpb25zKSB7XG4gICAgLy8ge2F9LGJ9XG4gICAgaWYgKG0ucG9zdC5tYXRjaCgvLC4qXFx9LykpIHtcbiAgICAgIHN0ciA9IG0ucHJlICsgJ3snICsgbS5ib2R5ICsgZXNjQ2xvc2UgKyBtLnBvc3Q7XG4gICAgICByZXR1cm4gZXhwYW5kKHN0cik7XG4gICAgfVxuICAgIHJldHVybiBbc3RyXTtcbiAgfVxuXG4gIHZhciBuO1xuICBpZiAoaXNTZXF1ZW5jZSkge1xuICAgIG4gPSBtLmJvZHkuc3BsaXQoL1xcLlxcLi8pO1xuICB9IGVsc2Uge1xuICAgIG4gPSBwYXJzZUNvbW1hUGFydHMobS5ib2R5KTtcbiAgICBpZiAobi5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIHh7e2EsYn19eSA9PT4geHthfXkgeHtifXlcbiAgICAgIG4gPSBleHBhbmQoblswXSwgZmFsc2UpLm1hcChlbWJyYWNlKTtcbiAgICAgIGlmIChuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgcG9zdCA9IG0ucG9zdC5sZW5ndGhcbiAgICAgICAgICA/IGV4cGFuZChtLnBvc3QsIGZhbHNlKVxuICAgICAgICAgIDogWycnXTtcbiAgICAgICAgcmV0dXJuIHBvc3QubWFwKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICByZXR1cm4gbS5wcmUgKyBuWzBdICsgcDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gYXQgdGhpcyBwb2ludCwgbiBpcyB0aGUgcGFydHMsIGFuZCB3ZSBrbm93IGl0J3Mgbm90IGEgY29tbWEgc2V0XG4gIC8vIHdpdGggYSBzaW5nbGUgZW50cnkuXG5cbiAgLy8gbm8gbmVlZCB0byBleHBhbmQgcHJlLCBzaW5jZSBpdCBpcyBndWFyYW50ZWVkIHRvIGJlIGZyZWUgb2YgYnJhY2Utc2V0c1xuICB2YXIgcHJlID0gbS5wcmU7XG4gIHZhciBwb3N0ID0gbS5wb3N0Lmxlbmd0aFxuICAgID8gZXhwYW5kKG0ucG9zdCwgZmFsc2UpXG4gICAgOiBbJyddO1xuXG4gIHZhciBOO1xuXG4gIGlmIChpc1NlcXVlbmNlKSB7XG4gICAgdmFyIHggPSBudW1lcmljKG5bMF0pO1xuICAgIHZhciB5ID0gbnVtZXJpYyhuWzFdKTtcbiAgICB2YXIgd2lkdGggPSBNYXRoLm1heChuWzBdLmxlbmd0aCwgblsxXS5sZW5ndGgpXG4gICAgdmFyIGluY3IgPSBuLmxlbmd0aCA9PSAzXG4gICAgICA/IE1hdGguYWJzKG51bWVyaWMoblsyXSkpXG4gICAgICA6IDE7XG4gICAgdmFyIHRlc3QgPSBsdGU7XG4gICAgdmFyIHJldmVyc2UgPSB5IDwgeDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgaW5jciAqPSAtMTtcbiAgICAgIHRlc3QgPSBndGU7XG4gICAgfVxuICAgIHZhciBwYWQgPSBuLnNvbWUoaXNQYWRkZWQpO1xuXG4gICAgTiA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IHg7IHRlc3QoaSwgeSk7IGkgKz0gaW5jcikge1xuICAgICAgdmFyIGM7XG4gICAgICBpZiAoaXNBbHBoYVNlcXVlbmNlKSB7XG4gICAgICAgIGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpO1xuICAgICAgICBpZiAoYyA9PT0gJ1xcXFwnKVxuICAgICAgICAgIGMgPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGMgPSBTdHJpbmcoaSk7XG4gICAgICAgIGlmIChwYWQpIHtcbiAgICAgICAgICB2YXIgbmVlZCA9IHdpZHRoIC0gYy5sZW5ndGg7XG4gICAgICAgICAgaWYgKG5lZWQgPiAwKSB7XG4gICAgICAgICAgICB2YXIgeiA9IG5ldyBBcnJheShuZWVkICsgMSkuam9pbignMCcpO1xuICAgICAgICAgICAgaWYgKGkgPCAwKVxuICAgICAgICAgICAgICBjID0gJy0nICsgeiArIGMuc2xpY2UoMSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIGMgPSB6ICsgYztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIE4ucHVzaChjKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgTiA9IGNvbmNhdE1hcChuLCBmdW5jdGlvbihlbCkgeyByZXR1cm4gZXhwYW5kKGVsLCBmYWxzZSkgfSk7XG4gIH1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IE4ubGVuZ3RoOyBqKyspIHtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHBvc3QubGVuZ3RoOyBrKyspIHtcbiAgICAgIHZhciBleHBhbnNpb24gPSBwcmUgKyBOW2pdICsgcG9zdFtrXTtcbiAgICAgIGlmICghaXNUb3AgfHwgaXNTZXF1ZW5jZSB8fCBleHBhbnNpb24pXG4gICAgICAgIGV4cGFuc2lvbnMucHVzaChleHBhbnNpb24pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHBhbnNpb25zO1xufVxuXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCBhcnJheSB3aXRoIGRpcmVjdG9yeSBuYW1lcyB0aGVyZVxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcKSBpbiB0aGUgYXJyYXlcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxuLy8gcmVsYXRpdmUgYW5kIGFic29sdXRlIHBhdGhzKVxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gU3BsaXQgYSBmaWxlbmFtZSBpbnRvIFtyb290LCBkaXIsIGJhc2VuYW1lLCBleHRdLCB1bml4IHZlcnNpb25cbi8vICdyb290JyBpcyBqdXN0IGEgc2xhc2gsIG9yIG5vdGhpbmcuXG52YXIgc3BsaXRQYXRoUmUgPVxuICAgIC9eKFxcLz98KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXlxcL10rP3wpKFxcLlteLlxcL10qfCkpKD86W1xcL10qKSQvO1xudmFyIHNwbGl0UGF0aCA9IGZ1bmN0aW9uKGZpbGVuYW1lKSB7XG4gIHJldHVybiBzcGxpdFBhdGhSZS5leGVjKGZpbGVuYW1lKS5zbGljZSgxKTtcbn07XG5cbi8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzb2x2ZWRQYXRoID0gJycsXG4gICAgICByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICB2YXIgcGF0aCA9IChpID49IDApID8gYXJndW1lbnRzW2ldIDogcHJvY2Vzcy5jd2QoKTtcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCksXG4gICAgICB0cmFpbGluZ1NsYXNoID0gc3Vic3RyKHBhdGgsIC0xKSA9PT0gJy8nO1xuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICBwYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhaXNBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHBhdGggPSAnLic7XG4gIH1cbiAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgIHBhdGggKz0gJy8nO1xuICB9XG5cbiAgcmV0dXJuIChpc0Fic29sdXRlID8gJy8nIDogJycpICsgcGF0aDtcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLyc7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmpvaW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgcmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocywgZnVuY3Rpb24ocCwgaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIHAgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfSkuam9pbignLycpKTtcbn07XG5cblxuLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVsYXRpdmUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICBmcm9tID0gZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTtcbiAgdG8gPSBleHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn07XG5cbmV4cG9ydHMuc2VwID0gJy8nO1xuZXhwb3J0cy5kZWxpbWl0ZXIgPSAnOic7XG5cbmV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIHJlc3VsdCA9IHNwbGl0UGF0aChwYXRoKSxcbiAgICAgIHJvb3QgPSByZXN1bHRbMF0sXG4gICAgICBkaXIgPSByZXN1bHRbMV07XG5cbiAgaWYgKCFyb290ICYmICFkaXIpIHtcbiAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICByZXR1cm4gJy4nO1xuICB9XG5cbiAgaWYgKGRpcikge1xuICAgIC8vIEl0IGhhcyBhIGRpcm5hbWUsIHN0cmlwIHRyYWlsaW5nIHNsYXNoXG4gICAgZGlyID0gZGlyLnN1YnN0cigwLCBkaXIubGVuZ3RoIC0gMSk7XG4gIH1cblxuICByZXR1cm4gcm9vdCArIGRpcjtcbn07XG5cblxuZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IHNwbGl0UGF0aChwYXRoKVsyXTtcbiAgLy8gVE9ETzogbWFrZSB0aGlzIGNvbXBhcmlzb24gY2FzZS1pbnNlbnNpdGl2ZSBvbiB3aW5kb3dzP1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuXG5leHBvcnRzLmV4dG5hbWUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBzcGxpdFBhdGgocGF0aClbM107XG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIgKHhzLCBmKSB7XG4gICAgaWYgKHhzLmZpbHRlcikgcmV0dXJuIHhzLmZpbHRlcihmKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZih4c1tpXSwgaSwgeHMpKSByZXMucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUuc3Vic3RyIC0gbmVnYXRpdmUgaW5kZXggZG9uJ3Qgd29yayBpbiBJRThcbnZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJ1xuICAgID8gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikgeyByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKSB9XG4gICAgOiBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7XG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKTtcbiAgICB9XG47XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG1pbmltYXRjaFxubWluaW1hdGNoLk1pbmltYXRjaCA9IE1pbmltYXRjaFxuXG52YXIgcGF0aCA9IHsgc2VwOiAnLycgfVxudHJ5IHtcbiAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxufSBjYXRjaCAoZXIpIHt9XG5cbnZhciBHTE9CU1RBUiA9IG1pbmltYXRjaC5HTE9CU1RBUiA9IE1pbmltYXRjaC5HTE9CU1RBUiA9IHt9XG52YXIgZXhwYW5kID0gcmVxdWlyZSgnYnJhY2UtZXhwYW5zaW9uJylcblxudmFyIHBsVHlwZXMgPSB7XG4gICchJzogeyBvcGVuOiAnKD86KD8hKD86JywgY2xvc2U6ICcpKVteL10qPyknfSxcbiAgJz8nOiB7IG9wZW46ICcoPzonLCBjbG9zZTogJyk/JyB9LFxuICAnKyc6IHsgb3BlbjogJyg/OicsIGNsb3NlOiAnKSsnIH0sXG4gICcqJzogeyBvcGVuOiAnKD86JywgY2xvc2U6ICcpKicgfSxcbiAgJ0AnOiB7IG9wZW46ICcoPzonLCBjbG9zZTogJyknIH1cbn1cblxuLy8gYW55IHNpbmdsZSB0aGluZyBvdGhlciB0aGFuIC9cbi8vIGRvbid0IG5lZWQgdG8gZXNjYXBlIC8gd2hlbiB1c2luZyBuZXcgUmVnRXhwKClcbnZhciBxbWFyayA9ICdbXi9dJ1xuXG4vLyAqID0+IGFueSBudW1iZXIgb2YgY2hhcmFjdGVyc1xudmFyIHN0YXIgPSBxbWFyayArICcqPydcblxuLy8gKiogd2hlbiBkb3RzIGFyZSBhbGxvd2VkLiAgQW55dGhpbmcgZ29lcywgZXhjZXB0IC4uIGFuZCAuXG4vLyBub3QgKF4gb3IgLyBmb2xsb3dlZCBieSBvbmUgb3IgdHdvIGRvdHMgZm9sbG93ZWQgYnkgJCBvciAvKSxcbi8vIGZvbGxvd2VkIGJ5IGFueXRoaW5nLCBhbnkgbnVtYmVyIG9mIHRpbWVzLlxudmFyIHR3b1N0YXJEb3QgPSAnKD86KD8hKD86XFxcXFxcL3xeKSg/OlxcXFwuezEsMn0pKCR8XFxcXFxcLykpLikqPydcblxuLy8gbm90IGEgXiBvciAvIGZvbGxvd2VkIGJ5IGEgZG90LFxuLy8gZm9sbG93ZWQgYnkgYW55dGhpbmcsIGFueSBudW1iZXIgb2YgdGltZXMuXG52YXIgdHdvU3Rhck5vRG90ID0gJyg/Oig/ISg/OlxcXFxcXC98XilcXFxcLikuKSo/J1xuXG4vLyBjaGFyYWN0ZXJzIHRoYXQgbmVlZCB0byBiZSBlc2NhcGVkIGluIFJlZ0V4cC5cbnZhciByZVNwZWNpYWxzID0gY2hhclNldCgnKCkuKnt9Kz9bXV4kXFxcXCEnKVxuXG4vLyBcImFiY1wiIC0+IHsgYTp0cnVlLCBiOnRydWUsIGM6dHJ1ZSB9XG5mdW5jdGlvbiBjaGFyU2V0IChzKSB7XG4gIHJldHVybiBzLnNwbGl0KCcnKS5yZWR1Y2UoZnVuY3Rpb24gKHNldCwgYykge1xuICAgIHNldFtjXSA9IHRydWVcbiAgICByZXR1cm4gc2V0XG4gIH0sIHt9KVxufVxuXG4vLyBub3JtYWxpemVzIHNsYXNoZXMuXG52YXIgc2xhc2hTcGxpdCA9IC9cXC8rL1xuXG5taW5pbWF0Y2guZmlsdGVyID0gZmlsdGVyXG5mdW5jdGlvbiBmaWx0ZXIgKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgcmV0dXJuIGZ1bmN0aW9uIChwLCBpLCBsaXN0KSB7XG4gICAgcmV0dXJuIG1pbmltYXRjaChwLCBwYXR0ZXJuLCBvcHRpb25zKVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dCAoYSwgYikge1xuICBhID0gYSB8fCB7fVxuICBiID0gYiB8fCB7fVxuICB2YXIgdCA9IHt9XG4gIE9iamVjdC5rZXlzKGIpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICB0W2tdID0gYltrXVxuICB9KVxuICBPYmplY3Qua2V5cyhhKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgdFtrXSA9IGFba11cbiAgfSlcbiAgcmV0dXJuIHRcbn1cblxubWluaW1hdGNoLmRlZmF1bHRzID0gZnVuY3Rpb24gKGRlZikge1xuICBpZiAoIWRlZiB8fCAhT2JqZWN0LmtleXMoZGVmKS5sZW5ndGgpIHJldHVybiBtaW5pbWF0Y2hcblxuICB2YXIgb3JpZyA9IG1pbmltYXRjaFxuXG4gIHZhciBtID0gZnVuY3Rpb24gbWluaW1hdGNoIChwLCBwYXR0ZXJuLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9yaWcubWluaW1hdGNoKHAsIHBhdHRlcm4sIGV4dChkZWYsIG9wdGlvbnMpKVxuICB9XG5cbiAgbS5NaW5pbWF0Y2ggPSBmdW5jdGlvbiBNaW5pbWF0Y2ggKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IG9yaWcuTWluaW1hdGNoKHBhdHRlcm4sIGV4dChkZWYsIG9wdGlvbnMpKVxuICB9XG5cbiAgcmV0dXJuIG1cbn1cblxuTWluaW1hdGNoLmRlZmF1bHRzID0gZnVuY3Rpb24gKGRlZikge1xuICBpZiAoIWRlZiB8fCAhT2JqZWN0LmtleXMoZGVmKS5sZW5ndGgpIHJldHVybiBNaW5pbWF0Y2hcbiAgcmV0dXJuIG1pbmltYXRjaC5kZWZhdWx0cyhkZWYpLk1pbmltYXRjaFxufVxuXG5mdW5jdGlvbiBtaW5pbWF0Y2ggKHAsIHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2dsb2IgcGF0dGVybiBzdHJpbmcgcmVxdWlyZWQnKVxuICB9XG5cbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge31cblxuICAvLyBzaG9ydGN1dDogY29tbWVudHMgbWF0Y2ggbm90aGluZy5cbiAgaWYgKCFvcHRpb25zLm5vY29tbWVudCAmJiBwYXR0ZXJuLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBcIlwiIG9ubHkgbWF0Y2hlcyBcIlwiXG4gIGlmIChwYXR0ZXJuLnRyaW0oKSA9PT0gJycpIHJldHVybiBwID09PSAnJ1xuXG4gIHJldHVybiBuZXcgTWluaW1hdGNoKHBhdHRlcm4sIG9wdGlvbnMpLm1hdGNoKHApXG59XG5cbmZ1bmN0aW9uIE1pbmltYXRjaCAocGF0dGVybiwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTWluaW1hdGNoKSkge1xuICAgIHJldHVybiBuZXcgTWluaW1hdGNoKHBhdHRlcm4sIG9wdGlvbnMpXG4gIH1cblxuICBpZiAodHlwZW9mIHBhdHRlcm4gIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZ2xvYiBwYXR0ZXJuIHN0cmluZyByZXF1aXJlZCcpXG4gIH1cblxuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fVxuICBwYXR0ZXJuID0gcGF0dGVybi50cmltKClcblxuICAvLyB3aW5kb3dzIHN1cHBvcnQ6IG5lZWQgdG8gdXNlIC8sIG5vdCBcXFxuICBpZiAocGF0aC5zZXAgIT09ICcvJykge1xuICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNwbGl0KHBhdGguc2VwKS5qb2luKCcvJylcbiAgfVxuXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgdGhpcy5zZXQgPSBbXVxuICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuXG4gIHRoaXMucmVnZXhwID0gbnVsbFxuICB0aGlzLm5lZ2F0ZSA9IGZhbHNlXG4gIHRoaXMuY29tbWVudCA9IGZhbHNlXG4gIHRoaXMuZW1wdHkgPSBmYWxzZVxuXG4gIC8vIG1ha2UgdGhlIHNldCBvZiByZWdleHBzIGV0Yy5cbiAgdGhpcy5tYWtlKClcbn1cblxuTWluaW1hdGNoLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9XG5cbk1pbmltYXRjaC5wcm90b3R5cGUubWFrZSA9IG1ha2VcbmZ1bmN0aW9uIG1ha2UgKCkge1xuICAvLyBkb24ndCBkbyBpdCBtb3JlIHRoYW4gb25jZS5cbiAgaWYgKHRoaXMuX21hZGUpIHJldHVyblxuXG4gIHZhciBwYXR0ZXJuID0gdGhpcy5wYXR0ZXJuXG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zXG5cbiAgLy8gZW1wdHkgcGF0dGVybnMgYW5kIGNvbW1lbnRzIG1hdGNoIG5vdGhpbmcuXG4gIGlmICghb3B0aW9ucy5ub2NvbW1lbnQgJiYgcGF0dGVybi5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHRoaXMuY29tbWVudCA9IHRydWVcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIXBhdHRlcm4pIHtcbiAgICB0aGlzLmVtcHR5ID0gdHJ1ZVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gc3RlcCAxOiBmaWd1cmUgb3V0IG5lZ2F0aW9uLCBldGMuXG4gIHRoaXMucGFyc2VOZWdhdGUoKVxuXG4gIC8vIHN0ZXAgMjogZXhwYW5kIGJyYWNlc1xuICB2YXIgc2V0ID0gdGhpcy5nbG9iU2V0ID0gdGhpcy5icmFjZUV4cGFuZCgpXG5cbiAgaWYgKG9wdGlvbnMuZGVidWcpIHRoaXMuZGVidWcgPSBjb25zb2xlLmVycm9yXG5cbiAgdGhpcy5kZWJ1Zyh0aGlzLnBhdHRlcm4sIHNldClcblxuICAvLyBzdGVwIDM6IG5vdyB3ZSBoYXZlIGEgc2V0LCBzbyB0dXJuIGVhY2ggb25lIGludG8gYSBzZXJpZXMgb2YgcGF0aC1wb3J0aW9uXG4gIC8vIG1hdGNoaW5nIHBhdHRlcm5zLlxuICAvLyBUaGVzZSB3aWxsIGJlIHJlZ2V4cHMsIGV4Y2VwdCBpbiB0aGUgY2FzZSBvZiBcIioqXCIsIHdoaWNoIGlzXG4gIC8vIHNldCB0byB0aGUgR0xPQlNUQVIgb2JqZWN0IGZvciBnbG9ic3RhciBiZWhhdmlvcixcbiAgLy8gYW5kIHdpbGwgbm90IGNvbnRhaW4gYW55IC8gY2hhcmFjdGVyc1xuICBzZXQgPSB0aGlzLmdsb2JQYXJ0cyA9IHNldC5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcy5zcGxpdChzbGFzaFNwbGl0KVxuICB9KVxuXG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpXG5cbiAgLy8gZ2xvYiAtLT4gcmVnZXhwc1xuICBzZXQgPSBzZXQubWFwKGZ1bmN0aW9uIChzLCBzaSwgc2V0KSB7XG4gICAgcmV0dXJuIHMubWFwKHRoaXMucGFyc2UsIHRoaXMpXG4gIH0sIHRoaXMpXG5cbiAgdGhpcy5kZWJ1Zyh0aGlzLnBhdHRlcm4sIHNldClcblxuICAvLyBmaWx0ZXIgb3V0IGV2ZXJ5dGhpbmcgdGhhdCBkaWRuJ3QgY29tcGlsZSBwcm9wZXJseS5cbiAgc2V0ID0gc2V0LmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzLmluZGV4T2YoZmFsc2UpID09PSAtMVxuICB9KVxuXG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpXG5cbiAgdGhpcy5zZXQgPSBzZXRcbn1cblxuTWluaW1hdGNoLnByb3RvdHlwZS5wYXJzZU5lZ2F0ZSA9IHBhcnNlTmVnYXRlXG5mdW5jdGlvbiBwYXJzZU5lZ2F0ZSAoKSB7XG4gIHZhciBwYXR0ZXJuID0gdGhpcy5wYXR0ZXJuXG4gIHZhciBuZWdhdGUgPSBmYWxzZVxuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuICB2YXIgbmVnYXRlT2Zmc2V0ID0gMFxuXG4gIGlmIChvcHRpb25zLm5vbmVnYXRlKSByZXR1cm5cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhdHRlcm4ubGVuZ3RoXG4gICAgOyBpIDwgbCAmJiBwYXR0ZXJuLmNoYXJBdChpKSA9PT0gJyEnXG4gICAgOyBpKyspIHtcbiAgICBuZWdhdGUgPSAhbmVnYXRlXG4gICAgbmVnYXRlT2Zmc2V0KytcbiAgfVxuXG4gIGlmIChuZWdhdGVPZmZzZXQpIHRoaXMucGF0dGVybiA9IHBhdHRlcm4uc3Vic3RyKG5lZ2F0ZU9mZnNldClcbiAgdGhpcy5uZWdhdGUgPSBuZWdhdGVcbn1cblxuLy8gQnJhY2UgZXhwYW5zaW9uOlxuLy8gYXtiLGN9ZCAtPiBhYmQgYWNkXG4vLyBhe2IsfWMgLT4gYWJjIGFjXG4vLyBhezAuLjN9ZCAtPiBhMGQgYTFkIGEyZCBhM2Rcbi8vIGF7Yixje2QsZX1mfWcgLT4gYWJnIGFjZGZnIGFjZWZnXG4vLyBhe2IsY31ke2UsZn1nIC0+IGFiZGVnIGFjZGVnIGFiZGVnIGFiZGZnXG4vL1xuLy8gSW52YWxpZCBzZXRzIGFyZSBub3QgZXhwYW5kZWQuXG4vLyBhezIuLn1iIC0+IGF7Mi4ufWJcbi8vIGF7Yn1jIC0+IGF7Yn1jXG5taW5pbWF0Y2guYnJhY2VFeHBhbmQgPSBmdW5jdGlvbiAocGF0dGVybiwgb3B0aW9ucykge1xuICByZXR1cm4gYnJhY2VFeHBhbmQocGF0dGVybiwgb3B0aW9ucylcbn1cblxuTWluaW1hdGNoLnByb3RvdHlwZS5icmFjZUV4cGFuZCA9IGJyYWNlRXhwYW5kXG5cbmZ1bmN0aW9uIGJyYWNlRXhwYW5kIChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgTWluaW1hdGNoKSB7XG4gICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zXG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMgPSB7fVxuICAgIH1cbiAgfVxuXG4gIHBhdHRlcm4gPSB0eXBlb2YgcGF0dGVybiA9PT0gJ3VuZGVmaW5lZCdcbiAgICA/IHRoaXMucGF0dGVybiA6IHBhdHRlcm5cblxuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5kZWZpbmVkIHBhdHRlcm4nKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMubm9icmFjZSB8fFxuICAgICFwYXR0ZXJuLm1hdGNoKC9cXHsuKlxcfS8pKSB7XG4gICAgLy8gc2hvcnRjdXQuIG5vIG5lZWQgdG8gZXhwYW5kLlxuICAgIHJldHVybiBbcGF0dGVybl1cbiAgfVxuXG4gIHJldHVybiBleHBhbmQocGF0dGVybilcbn1cblxuLy8gcGFyc2UgYSBjb21wb25lbnQgb2YgdGhlIGV4cGFuZGVkIHNldC5cbi8vIEF0IHRoaXMgcG9pbnQsIG5vIHBhdHRlcm4gbWF5IGNvbnRhaW4gXCIvXCIgaW4gaXRcbi8vIHNvIHdlJ3JlIGdvaW5nIHRvIHJldHVybiBhIDJkIGFycmF5LCB3aGVyZSBlYWNoIGVudHJ5IGlzIHRoZSBmdWxsXG4vLyBwYXR0ZXJuLCBzcGxpdCBvbiAnLycsIGFuZCB0aGVuIHR1cm5lZCBpbnRvIGEgcmVndWxhciBleHByZXNzaW9uLlxuLy8gQSByZWdleHAgaXMgbWFkZSBhdCB0aGUgZW5kIHdoaWNoIGpvaW5zIGVhY2ggYXJyYXkgd2l0aCBhblxuLy8gZXNjYXBlZCAvLCBhbmQgYW5vdGhlciBmdWxsIG9uZSB3aGljaCBqb2lucyBlYWNoIHJlZ2V4cCB3aXRoIHwuXG4vL1xuLy8gRm9sbG93aW5nIHRoZSBsZWFkIG9mIEJhc2ggNC4xLCBub3RlIHRoYXQgXCIqKlwiIG9ubHkgaGFzIHNwZWNpYWwgbWVhbmluZ1xuLy8gd2hlbiBpdCBpcyB0aGUgKm9ubHkqIHRoaW5nIGluIGEgcGF0aCBwb3J0aW9uLiAgT3RoZXJ3aXNlLCBhbnkgc2VyaWVzXG4vLyBvZiAqIGlzIGVxdWl2YWxlbnQgdG8gYSBzaW5nbGUgKi4gIEdsb2JzdGFyIGJlaGF2aW9yIGlzIGVuYWJsZWQgYnlcbi8vIGRlZmF1bHQsIGFuZCBjYW4gYmUgZGlzYWJsZWQgYnkgc2V0dGluZyBvcHRpb25zLm5vZ2xvYnN0YXIuXG5NaW5pbWF0Y2gucHJvdG90eXBlLnBhcnNlID0gcGFyc2VcbnZhciBTVUJQQVJTRSA9IHt9XG5mdW5jdGlvbiBwYXJzZSAocGF0dGVybiwgaXNTdWIpIHtcbiAgaWYgKHBhdHRlcm4ubGVuZ3RoID4gMTAyNCAqIDY0KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGF0dGVybiBpcyB0b28gbG9uZycpXG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuXG4gIC8vIHNob3J0Y3V0c1xuICBpZiAoIW9wdGlvbnMubm9nbG9ic3RhciAmJiBwYXR0ZXJuID09PSAnKionKSByZXR1cm4gR0xPQlNUQVJcbiAgaWYgKHBhdHRlcm4gPT09ICcnKSByZXR1cm4gJydcblxuICB2YXIgcmUgPSAnJ1xuICB2YXIgaGFzTWFnaWMgPSAhIW9wdGlvbnMubm9jYXNlXG4gIHZhciBlc2NhcGluZyA9IGZhbHNlXG4gIC8vID8gPT4gb25lIHNpbmdsZSBjaGFyYWN0ZXJcbiAgdmFyIHBhdHRlcm5MaXN0U3RhY2sgPSBbXVxuICB2YXIgbmVnYXRpdmVMaXN0cyA9IFtdXG4gIHZhciBzdGF0ZUNoYXJcbiAgdmFyIGluQ2xhc3MgPSBmYWxzZVxuICB2YXIgcmVDbGFzc1N0YXJ0ID0gLTFcbiAgdmFyIGNsYXNzU3RhcnQgPSAtMVxuICAvLyAuIGFuZCAuLiBuZXZlciBtYXRjaCBhbnl0aGluZyB0aGF0IGRvZXNuJ3Qgc3RhcnQgd2l0aCAuLFxuICAvLyBldmVuIHdoZW4gb3B0aW9ucy5kb3QgaXMgc2V0LlxuICB2YXIgcGF0dGVyblN0YXJ0ID0gcGF0dGVybi5jaGFyQXQoMCkgPT09ICcuJyA/ICcnIC8vIGFueXRoaW5nXG4gIC8vIG5vdCAoc3RhcnQgb3IgLyBmb2xsb3dlZCBieSAuIG9yIC4uIGZvbGxvd2VkIGJ5IC8gb3IgZW5kKVxuICA6IG9wdGlvbnMuZG90ID8gJyg/ISg/Ol58XFxcXFxcLylcXFxcLnsxLDJ9KD86JHxcXFxcXFwvKSknXG4gIDogJyg/IVxcXFwuKSdcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgZnVuY3Rpb24gY2xlYXJTdGF0ZUNoYXIgKCkge1xuICAgIGlmIChzdGF0ZUNoYXIpIHtcbiAgICAgIC8vIHdlIGhhZCBzb21lIHN0YXRlLXRyYWNraW5nIGNoYXJhY3RlclxuICAgICAgLy8gdGhhdCB3YXNuJ3QgY29uc3VtZWQgYnkgdGhpcyBwYXNzLlxuICAgICAgc3dpdGNoIChzdGF0ZUNoYXIpIHtcbiAgICAgICAgY2FzZSAnKic6XG4gICAgICAgICAgcmUgKz0gc3RhclxuICAgICAgICAgIGhhc01hZ2ljID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgICBjYXNlICc/JzpcbiAgICAgICAgICByZSArPSBxbWFya1xuICAgICAgICAgIGhhc01hZ2ljID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlICs9ICdcXFxcJyArIHN0YXRlQ2hhclxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgc2VsZi5kZWJ1ZygnY2xlYXJTdGF0ZUNoYXIgJWogJWonLCBzdGF0ZUNoYXIsIHJlKVxuICAgICAgc3RhdGVDaGFyID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGF0dGVybi5sZW5ndGgsIGNcbiAgICA7IChpIDwgbGVuKSAmJiAoYyA9IHBhdHRlcm4uY2hhckF0KGkpKVxuICAgIDsgaSsrKSB7XG4gICAgdGhpcy5kZWJ1ZygnJXNcXHQlcyAlcyAlaicsIHBhdHRlcm4sIGksIHJlLCBjKVxuXG4gICAgLy8gc2tpcCBvdmVyIGFueSB0aGF0IGFyZSBlc2NhcGVkLlxuICAgIGlmIChlc2NhcGluZyAmJiByZVNwZWNpYWxzW2NdKSB7XG4gICAgICByZSArPSAnXFxcXCcgKyBjXG4gICAgICBlc2NhcGluZyA9IGZhbHNlXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHN3aXRjaCAoYykge1xuICAgICAgY2FzZSAnLyc6XG4gICAgICAgIC8vIGNvbXBsZXRlbHkgbm90IGFsbG93ZWQsIGV2ZW4gZXNjYXBlZC5cbiAgICAgICAgLy8gU2hvdWxkIGFscmVhZHkgYmUgcGF0aC1zcGxpdCBieSBub3cuXG4gICAgICAgIHJldHVybiBmYWxzZVxuXG4gICAgICBjYXNlICdcXFxcJzpcbiAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKVxuICAgICAgICBlc2NhcGluZyA9IHRydWVcbiAgICAgIGNvbnRpbnVlXG5cbiAgICAgIC8vIHRoZSB2YXJpb3VzIHN0YXRlQ2hhciB2YWx1ZXNcbiAgICAgIC8vIGZvciB0aGUgXCJleHRnbG9iXCIgc3R1ZmYuXG4gICAgICBjYXNlICc/JzpcbiAgICAgIGNhc2UgJyonOlxuICAgICAgY2FzZSAnKyc6XG4gICAgICBjYXNlICdAJzpcbiAgICAgIGNhc2UgJyEnOlxuICAgICAgICB0aGlzLmRlYnVnKCclc1xcdCVzICVzICVqIDwtLSBzdGF0ZUNoYXInLCBwYXR0ZXJuLCBpLCByZSwgYylcblxuICAgICAgICAvLyBhbGwgb2YgdGhvc2UgYXJlIGxpdGVyYWxzIGluc2lkZSBhIGNsYXNzLCBleGNlcHQgdGhhdFxuICAgICAgICAvLyB0aGUgZ2xvYiBbIWFdIG1lYW5zIFteYV0gaW4gcmVnZXhwXG4gICAgICAgIGlmIChpbkNsYXNzKSB7XG4gICAgICAgICAgdGhpcy5kZWJ1ZygnICBpbiBjbGFzcycpXG4gICAgICAgICAgaWYgKGMgPT09ICchJyAmJiBpID09PSBjbGFzc1N0YXJ0ICsgMSkgYyA9ICdeJ1xuICAgICAgICAgIHJlICs9IGNcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgd2UgYWxyZWFkeSBoYXZlIGEgc3RhdGVDaGFyLCB0aGVuIGl0IG1lYW5zXG4gICAgICAgIC8vIHRoYXQgdGhlcmUgd2FzIHNvbWV0aGluZyBsaWtlICoqIG9yICs/IGluIHRoZXJlLlxuICAgICAgICAvLyBIYW5kbGUgdGhlIHN0YXRlQ2hhciwgdGhlbiBwcm9jZWVkIHdpdGggdGhpcyBvbmUuXG4gICAgICAgIHNlbGYuZGVidWcoJ2NhbGwgY2xlYXJTdGF0ZUNoYXIgJWonLCBzdGF0ZUNoYXIpXG4gICAgICAgIGNsZWFyU3RhdGVDaGFyKClcbiAgICAgICAgc3RhdGVDaGFyID0gY1xuICAgICAgICAvLyBpZiBleHRnbG9iIGlzIGRpc2FibGVkLCB0aGVuICsoYXNkZnxmb28pIGlzbid0IGEgdGhpbmcuXG4gICAgICAgIC8vIGp1c3QgY2xlYXIgdGhlIHN0YXRlY2hhciAqbm93KiwgcmF0aGVyIHRoYW4gZXZlbiBkaXZpbmcgaW50b1xuICAgICAgICAvLyB0aGUgcGF0dGVybkxpc3Qgc3R1ZmYuXG4gICAgICAgIGlmIChvcHRpb25zLm5vZXh0KSBjbGVhclN0YXRlQ2hhcigpXG4gICAgICBjb250aW51ZVxuXG4gICAgICBjYXNlICcoJzpcbiAgICAgICAgaWYgKGluQ2xhc3MpIHtcbiAgICAgICAgICByZSArPSAnKCdcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGF0ZUNoYXIpIHtcbiAgICAgICAgICByZSArPSAnXFxcXCgnXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIHBhdHRlcm5MaXN0U3RhY2sucHVzaCh7XG4gICAgICAgICAgdHlwZTogc3RhdGVDaGFyLFxuICAgICAgICAgIHN0YXJ0OiBpIC0gMSxcbiAgICAgICAgICByZVN0YXJ0OiByZS5sZW5ndGgsXG4gICAgICAgICAgb3BlbjogcGxUeXBlc1tzdGF0ZUNoYXJdLm9wZW4sXG4gICAgICAgICAgY2xvc2U6IHBsVHlwZXNbc3RhdGVDaGFyXS5jbG9zZVxuICAgICAgICB9KVxuICAgICAgICAvLyBuZWdhdGlvbiBpcyAoPzooPyFqcylbXi9dKilcbiAgICAgICAgcmUgKz0gc3RhdGVDaGFyID09PSAnIScgPyAnKD86KD8hKD86JyA6ICcoPzonXG4gICAgICAgIHRoaXMuZGVidWcoJ3BsVHlwZSAlaiAlaicsIHN0YXRlQ2hhciwgcmUpXG4gICAgICAgIHN0YXRlQ2hhciA9IGZhbHNlXG4gICAgICBjb250aW51ZVxuXG4gICAgICBjYXNlICcpJzpcbiAgICAgICAgaWYgKGluQ2xhc3MgfHwgIXBhdHRlcm5MaXN0U3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgcmUgKz0gJ1xcXFwpJ1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBjbGVhclN0YXRlQ2hhcigpXG4gICAgICAgIGhhc01hZ2ljID0gdHJ1ZVxuICAgICAgICB2YXIgcGwgPSBwYXR0ZXJuTGlzdFN0YWNrLnBvcCgpXG4gICAgICAgIC8vIG5lZ2F0aW9uIGlzICg/Oig/IWpzKVteL10qKVxuICAgICAgICAvLyBUaGUgb3RoZXJzIGFyZSAoPzo8cGF0dGVybj4pPHR5cGU+XG4gICAgICAgIHJlICs9IHBsLmNsb3NlXG4gICAgICAgIGlmIChwbC50eXBlID09PSAnIScpIHtcbiAgICAgICAgICBuZWdhdGl2ZUxpc3RzLnB1c2gocGwpXG4gICAgICAgIH1cbiAgICAgICAgcGwucmVFbmQgPSByZS5sZW5ndGhcbiAgICAgIGNvbnRpbnVlXG5cbiAgICAgIGNhc2UgJ3wnOlxuICAgICAgICBpZiAoaW5DbGFzcyB8fCAhcGF0dGVybkxpc3RTdGFjay5sZW5ndGggfHwgZXNjYXBpbmcpIHtcbiAgICAgICAgICByZSArPSAnXFxcXHwnXG4gICAgICAgICAgZXNjYXBpbmcgPSBmYWxzZVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBjbGVhclN0YXRlQ2hhcigpXG4gICAgICAgIHJlICs9ICd8J1xuICAgICAgY29udGludWVcblxuICAgICAgLy8gdGhlc2UgYXJlIG1vc3RseSB0aGUgc2FtZSBpbiByZWdleHAgYW5kIGdsb2JcbiAgICAgIGNhc2UgJ1snOlxuICAgICAgICAvLyBzd2FsbG93IGFueSBzdGF0ZS10cmFja2luZyBjaGFyIGJlZm9yZSB0aGUgW1xuICAgICAgICBjbGVhclN0YXRlQ2hhcigpXG5cbiAgICAgICAgaWYgKGluQ2xhc3MpIHtcbiAgICAgICAgICByZSArPSAnXFxcXCcgKyBjXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGluQ2xhc3MgPSB0cnVlXG4gICAgICAgIGNsYXNzU3RhcnQgPSBpXG4gICAgICAgIHJlQ2xhc3NTdGFydCA9IHJlLmxlbmd0aFxuICAgICAgICByZSArPSBjXG4gICAgICBjb250aW51ZVxuXG4gICAgICBjYXNlICddJzpcbiAgICAgICAgLy8gIGEgcmlnaHQgYnJhY2tldCBzaGFsbCBsb3NlIGl0cyBzcGVjaWFsXG4gICAgICAgIC8vICBtZWFuaW5nIGFuZCByZXByZXNlbnQgaXRzZWxmIGluXG4gICAgICAgIC8vICBhIGJyYWNrZXQgZXhwcmVzc2lvbiBpZiBpdCBvY2N1cnNcbiAgICAgICAgLy8gIGZpcnN0IGluIHRoZSBsaXN0LiAgLS0gUE9TSVguMiAyLjguMy4yXG4gICAgICAgIGlmIChpID09PSBjbGFzc1N0YXJ0ICsgMSB8fCAhaW5DbGFzcykge1xuICAgICAgICAgIHJlICs9ICdcXFxcJyArIGNcbiAgICAgICAgICBlc2NhcGluZyA9IGZhbHNlXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB3ZSBsZWZ0IGEgY2xhc3Mgb3Blbi5cbiAgICAgICAgLy8gXCJbei1hXVwiIGlzIHZhbGlkLCBlcXVpdmFsZW50IHRvIFwiXFxbei1hXFxdXCJcbiAgICAgICAgaWYgKGluQ2xhc3MpIHtcbiAgICAgICAgICAvLyBzcGxpdCB3aGVyZSB0aGUgbGFzdCBbIHdhcywgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmVcbiAgICAgICAgICAvLyBhbiBpbnZhbGlkIHJlLiBpZiBzbywgcmUtd2FsayB0aGUgY29udGVudHMgb2YgdGhlXG4gICAgICAgICAgLy8gd291bGQtYmUgY2xhc3MgdG8gcmUtdHJhbnNsYXRlIGFueSBjaGFyYWN0ZXJzIHRoYXRcbiAgICAgICAgICAvLyB3ZXJlIHBhc3NlZCB0aHJvdWdoIGFzLWlzXG4gICAgICAgICAgLy8gVE9ETzogSXQgd291bGQgcHJvYmFibHkgYmUgZmFzdGVyIHRvIGRldGVybWluZSB0aGlzXG4gICAgICAgICAgLy8gd2l0aG91dCBhIHRyeS9jYXRjaCBhbmQgYSBuZXcgUmVnRXhwLCBidXQgaXQncyB0cmlja3lcbiAgICAgICAgICAvLyB0byBkbyBzYWZlbHkuICBGb3Igbm93LCB0aGlzIGlzIHNhZmUgYW5kIHdvcmtzLlxuICAgICAgICAgIHZhciBjcyA9IHBhdHRlcm4uc3Vic3RyaW5nKGNsYXNzU3RhcnQgKyAxLCBpKVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBSZWdFeHAoJ1snICsgY3MgKyAnXScpXG4gICAgICAgICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgICAgICAgIC8vIG5vdCBhIHZhbGlkIGNsYXNzIVxuICAgICAgICAgICAgdmFyIHNwID0gdGhpcy5wYXJzZShjcywgU1VCUEFSU0UpXG4gICAgICAgICAgICByZSA9IHJlLnN1YnN0cigwLCByZUNsYXNzU3RhcnQpICsgJ1xcXFxbJyArIHNwWzBdICsgJ1xcXFxdJ1xuICAgICAgICAgICAgaGFzTWFnaWMgPSBoYXNNYWdpYyB8fCBzcFsxXVxuICAgICAgICAgICAgaW5DbGFzcyA9IGZhbHNlXG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpbmlzaCB1cCB0aGUgY2xhc3MuXG4gICAgICAgIGhhc01hZ2ljID0gdHJ1ZVxuICAgICAgICBpbkNsYXNzID0gZmFsc2VcbiAgICAgICAgcmUgKz0gY1xuICAgICAgY29udGludWVcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gc3dhbGxvdyBhbnkgc3RhdGUgY2hhciB0aGF0IHdhc24ndCBjb25zdW1lZFxuICAgICAgICBjbGVhclN0YXRlQ2hhcigpXG5cbiAgICAgICAgaWYgKGVzY2FwaW5nKSB7XG4gICAgICAgICAgLy8gbm8gbmVlZFxuICAgICAgICAgIGVzY2FwaW5nID0gZmFsc2VcbiAgICAgICAgfSBlbHNlIGlmIChyZVNwZWNpYWxzW2NdXG4gICAgICAgICAgJiYgIShjID09PSAnXicgJiYgaW5DbGFzcykpIHtcbiAgICAgICAgICByZSArPSAnXFxcXCdcbiAgICAgICAgfVxuXG4gICAgICAgIHJlICs9IGNcblxuICAgIH0gLy8gc3dpdGNoXG4gIH0gLy8gZm9yXG5cbiAgLy8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHdlIGxlZnQgYSBjbGFzcyBvcGVuLlxuICAvLyBcIlthYmNcIiBpcyB2YWxpZCwgZXF1aXZhbGVudCB0byBcIlxcW2FiY1wiXG4gIGlmIChpbkNsYXNzKSB7XG4gICAgLy8gc3BsaXQgd2hlcmUgdGhlIGxhc3QgWyB3YXMsIGFuZCBlc2NhcGUgaXRcbiAgICAvLyB0aGlzIGlzIGEgaHVnZSBwaXRhLiAgV2Ugbm93IGhhdmUgdG8gcmUtd2Fsa1xuICAgIC8vIHRoZSBjb250ZW50cyBvZiB0aGUgd291bGQtYmUgY2xhc3MgdG8gcmUtdHJhbnNsYXRlXG4gICAgLy8gYW55IGNoYXJhY3RlcnMgdGhhdCB3ZXJlIHBhc3NlZCB0aHJvdWdoIGFzLWlzXG4gICAgY3MgPSBwYXR0ZXJuLnN1YnN0cihjbGFzc1N0YXJ0ICsgMSlcbiAgICBzcCA9IHRoaXMucGFyc2UoY3MsIFNVQlBBUlNFKVxuICAgIHJlID0gcmUuc3Vic3RyKDAsIHJlQ2xhc3NTdGFydCkgKyAnXFxcXFsnICsgc3BbMF1cbiAgICBoYXNNYWdpYyA9IGhhc01hZ2ljIHx8IHNwWzFdXG4gIH1cblxuICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgd2UgaGFkIGEgKyggdGhpbmcgYXQgdGhlICplbmQqXG4gIC8vIG9mIHRoZSBwYXR0ZXJuLlxuICAvLyBlYWNoIHBhdHRlcm4gbGlzdCBzdGFjayBhZGRzIDMgY2hhcnMsIGFuZCB3ZSBuZWVkIHRvIGdvIHRocm91Z2hcbiAgLy8gYW5kIGVzY2FwZSBhbnkgfCBjaGFycyB0aGF0IHdlcmUgcGFzc2VkIHRocm91Z2ggYXMtaXMgZm9yIHRoZSByZWdleHAuXG4gIC8vIEdvIHRocm91Z2ggYW5kIGVzY2FwZSB0aGVtLCB0YWtpbmcgY2FyZSBub3QgdG8gZG91YmxlLWVzY2FwZSBhbnlcbiAgLy8gfCBjaGFycyB0aGF0IHdlcmUgYWxyZWFkeSBlc2NhcGVkLlxuICBmb3IgKHBsID0gcGF0dGVybkxpc3RTdGFjay5wb3AoKTsgcGw7IHBsID0gcGF0dGVybkxpc3RTdGFjay5wb3AoKSkge1xuICAgIHZhciB0YWlsID0gcmUuc2xpY2UocGwucmVTdGFydCArIHBsLm9wZW4ubGVuZ3RoKVxuICAgIHRoaXMuZGVidWcoJ3NldHRpbmcgdGFpbCcsIHJlLCBwbClcbiAgICAvLyBtYXliZSBzb21lIGV2ZW4gbnVtYmVyIG9mIFxcLCB0aGVuIG1heWJlIDEgXFwsIGZvbGxvd2VkIGJ5IGEgfFxuICAgIHRhaWwgPSB0YWlsLnJlcGxhY2UoLygoPzpcXFxcezJ9KXswLDY0fSkoXFxcXD8pXFx8L2csIGZ1bmN0aW9uIChfLCAkMSwgJDIpIHtcbiAgICAgIGlmICghJDIpIHtcbiAgICAgICAgLy8gdGhlIHwgaXNuJ3QgYWxyZWFkeSBlc2NhcGVkLCBzbyBlc2NhcGUgaXQuXG4gICAgICAgICQyID0gJ1xcXFwnXG4gICAgICB9XG5cbiAgICAgIC8vIG5lZWQgdG8gZXNjYXBlIGFsbCB0aG9zZSBzbGFzaGVzICphZ2FpbiosIHdpdGhvdXQgZXNjYXBpbmcgdGhlXG4gICAgICAvLyBvbmUgdGhhdCB3ZSBuZWVkIGZvciBlc2NhcGluZyB0aGUgfCBjaGFyYWN0ZXIuICBBcyBpdCB3b3JrcyBvdXQsXG4gICAgICAvLyBlc2NhcGluZyBhbiBldmVuIG51bWJlciBvZiBzbGFzaGVzIGNhbiBiZSBkb25lIGJ5IHNpbXBseSByZXBlYXRpbmdcbiAgICAgIC8vIGl0IGV4YWN0bHkgYWZ0ZXIgaXRzZWxmLiAgVGhhdCdzIHdoeSB0aGlzIHRyaWNrIHdvcmtzLlxuICAgICAgLy9cbiAgICAgIC8vIEkgYW0gc29ycnkgdGhhdCB5b3UgaGF2ZSB0byBzZWUgdGhpcy5cbiAgICAgIHJldHVybiAkMSArICQxICsgJDIgKyAnfCdcbiAgICB9KVxuXG4gICAgdGhpcy5kZWJ1ZygndGFpbD0lalxcbiAgICVzJywgdGFpbCwgdGFpbCwgcGwsIHJlKVxuICAgIHZhciB0ID0gcGwudHlwZSA9PT0gJyonID8gc3RhclxuICAgICAgOiBwbC50eXBlID09PSAnPycgPyBxbWFya1xuICAgICAgOiAnXFxcXCcgKyBwbC50eXBlXG5cbiAgICBoYXNNYWdpYyA9IHRydWVcbiAgICByZSA9IHJlLnNsaWNlKDAsIHBsLnJlU3RhcnQpICsgdCArICdcXFxcKCcgKyB0YWlsXG4gIH1cblxuICAvLyBoYW5kbGUgdHJhaWxpbmcgdGhpbmdzIHRoYXQgb25seSBtYXR0ZXIgYXQgdGhlIHZlcnkgZW5kLlxuICBjbGVhclN0YXRlQ2hhcigpXG4gIGlmIChlc2NhcGluZykge1xuICAgIC8vIHRyYWlsaW5nIFxcXFxcbiAgICByZSArPSAnXFxcXFxcXFwnXG4gIH1cblxuICAvLyBvbmx5IG5lZWQgdG8gYXBwbHkgdGhlIG5vZG90IHN0YXJ0IGlmIHRoZSByZSBzdGFydHMgd2l0aFxuICAvLyBzb21ldGhpbmcgdGhhdCBjb3VsZCBjb25jZWl2YWJseSBjYXB0dXJlIGEgZG90XG4gIHZhciBhZGRQYXR0ZXJuU3RhcnQgPSBmYWxzZVxuICBzd2l0Y2ggKHJlLmNoYXJBdCgwKSkge1xuICAgIGNhc2UgJy4nOlxuICAgIGNhc2UgJ1snOlxuICAgIGNhc2UgJygnOiBhZGRQYXR0ZXJuU3RhcnQgPSB0cnVlXG4gIH1cblxuICAvLyBIYWNrIHRvIHdvcmsgYXJvdW5kIGxhY2sgb2YgbmVnYXRpdmUgbG9va2JlaGluZCBpbiBKU1xuICAvLyBBIHBhdHRlcm4gbGlrZTogKi4hKHgpLiEoeXx6KSBuZWVkcyB0byBlbnN1cmUgdGhhdCBhIG5hbWVcbiAgLy8gbGlrZSAnYS54eXoueXonIGRvZXNuJ3QgbWF0Y2guICBTbywgdGhlIGZpcnN0IG5lZ2F0aXZlXG4gIC8vIGxvb2thaGVhZCwgaGFzIHRvIGxvb2sgQUxMIHRoZSB3YXkgYWhlYWQsIHRvIHRoZSBlbmQgb2ZcbiAgLy8gdGhlIHBhdHRlcm4uXG4gIGZvciAodmFyIG4gPSBuZWdhdGl2ZUxpc3RzLmxlbmd0aCAtIDE7IG4gPiAtMTsgbi0tKSB7XG4gICAgdmFyIG5sID0gbmVnYXRpdmVMaXN0c1tuXVxuXG4gICAgdmFyIG5sQmVmb3JlID0gcmUuc2xpY2UoMCwgbmwucmVTdGFydClcbiAgICB2YXIgbmxGaXJzdCA9IHJlLnNsaWNlKG5sLnJlU3RhcnQsIG5sLnJlRW5kIC0gOClcbiAgICB2YXIgbmxMYXN0ID0gcmUuc2xpY2UobmwucmVFbmQgLSA4LCBubC5yZUVuZClcbiAgICB2YXIgbmxBZnRlciA9IHJlLnNsaWNlKG5sLnJlRW5kKVxuXG4gICAgbmxMYXN0ICs9IG5sQWZ0ZXJcblxuICAgIC8vIEhhbmRsZSBuZXN0ZWQgc3R1ZmYgbGlrZSAqKCouanN8ISgqLmpzb24pKSwgd2hlcmUgb3BlbiBwYXJlbnNcbiAgICAvLyBtZWFuIHRoYXQgd2Ugc2hvdWxkICpub3QqIGluY2x1ZGUgdGhlICkgaW4gdGhlIGJpdCB0aGF0IGlzIGNvbnNpZGVyZWRcbiAgICAvLyBcImFmdGVyXCIgdGhlIG5lZ2F0ZWQgc2VjdGlvbi5cbiAgICB2YXIgb3BlblBhcmVuc0JlZm9yZSA9IG5sQmVmb3JlLnNwbGl0KCcoJykubGVuZ3RoIC0gMVxuICAgIHZhciBjbGVhbkFmdGVyID0gbmxBZnRlclxuICAgIGZvciAoaSA9IDA7IGkgPCBvcGVuUGFyZW5zQmVmb3JlOyBpKyspIHtcbiAgICAgIGNsZWFuQWZ0ZXIgPSBjbGVhbkFmdGVyLnJlcGxhY2UoL1xcKVsrKj9dPy8sICcnKVxuICAgIH1cbiAgICBubEFmdGVyID0gY2xlYW5BZnRlclxuXG4gICAgdmFyIGRvbGxhciA9ICcnXG4gICAgaWYgKG5sQWZ0ZXIgPT09ICcnICYmIGlzU3ViICE9PSBTVUJQQVJTRSkge1xuICAgICAgZG9sbGFyID0gJyQnXG4gICAgfVxuICAgIHZhciBuZXdSZSA9IG5sQmVmb3JlICsgbmxGaXJzdCArIG5sQWZ0ZXIgKyBkb2xsYXIgKyBubExhc3RcbiAgICByZSA9IG5ld1JlXG4gIH1cblxuICAvLyBpZiB0aGUgcmUgaXMgbm90IFwiXCIgYXQgdGhpcyBwb2ludCwgdGhlbiB3ZSBuZWVkIHRvIG1ha2Ugc3VyZVxuICAvLyBpdCBkb2Vzbid0IG1hdGNoIGFnYWluc3QgYW4gZW1wdHkgcGF0aCBwYXJ0LlxuICAvLyBPdGhlcndpc2UgYS8qIHdpbGwgbWF0Y2ggYS8sIHdoaWNoIGl0IHNob3VsZCBub3QuXG4gIGlmIChyZSAhPT0gJycgJiYgaGFzTWFnaWMpIHtcbiAgICByZSA9ICcoPz0uKScgKyByZVxuICB9XG5cbiAgaWYgKGFkZFBhdHRlcm5TdGFydCkge1xuICAgIHJlID0gcGF0dGVyblN0YXJ0ICsgcmVcbiAgfVxuXG4gIC8vIHBhcnNpbmcganVzdCBhIHBpZWNlIG9mIGEgbGFyZ2VyIHBhdHRlcm4uXG4gIGlmIChpc1N1YiA9PT0gU1VCUEFSU0UpIHtcbiAgICByZXR1cm4gW3JlLCBoYXNNYWdpY11cbiAgfVxuXG4gIC8vIHNraXAgdGhlIHJlZ2V4cCBmb3Igbm9uLW1hZ2ljYWwgcGF0dGVybnNcbiAgLy8gdW5lc2NhcGUgYW55dGhpbmcgaW4gaXQsIHRob3VnaCwgc28gdGhhdCBpdCdsbCBiZVxuICAvLyBhbiBleGFjdCBtYXRjaCBhZ2FpbnN0IGEgZmlsZSBldGMuXG4gIGlmICghaGFzTWFnaWMpIHtcbiAgICByZXR1cm4gZ2xvYlVuZXNjYXBlKHBhdHRlcm4pXG4gIH1cblxuICB2YXIgZmxhZ3MgPSBvcHRpb25zLm5vY2FzZSA/ICdpJyA6ICcnXG4gIHRyeSB7XG4gICAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAoJ14nICsgcmUgKyAnJCcsIGZsYWdzKVxuICB9IGNhdGNoIChlcikge1xuICAgIC8vIElmIGl0IHdhcyBhbiBpbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbiwgdGhlbiBpdCBjYW4ndCBtYXRjaFxuICAgIC8vIGFueXRoaW5nLiAgVGhpcyB0cmljayBsb29rcyBmb3IgYSBjaGFyYWN0ZXIgYWZ0ZXIgdGhlIGVuZCBvZlxuICAgIC8vIHRoZSBzdHJpbmcsIHdoaWNoIGlzIG9mIGNvdXJzZSBpbXBvc3NpYmxlLCBleGNlcHQgaW4gbXVsdGktbGluZVxuICAgIC8vIG1vZGUsIGJ1dCBpdCdzIG5vdCBhIC9tIHJlZ2V4LlxuICAgIHJldHVybiBuZXcgUmVnRXhwKCckLicpXG4gIH1cblxuICByZWdFeHAuX2dsb2IgPSBwYXR0ZXJuXG4gIHJlZ0V4cC5fc3JjID0gcmVcblxuICByZXR1cm4gcmVnRXhwXG59XG5cbm1pbmltYXRjaC5tYWtlUmUgPSBmdW5jdGlvbiAocGF0dGVybiwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IE1pbmltYXRjaChwYXR0ZXJuLCBvcHRpb25zIHx8IHt9KS5tYWtlUmUoKVxufVxuXG5NaW5pbWF0Y2gucHJvdG90eXBlLm1ha2VSZSA9IG1ha2VSZVxuZnVuY3Rpb24gbWFrZVJlICgpIHtcbiAgaWYgKHRoaXMucmVnZXhwIHx8IHRoaXMucmVnZXhwID09PSBmYWxzZSkgcmV0dXJuIHRoaXMucmVnZXhwXG5cbiAgLy8gYXQgdGhpcyBwb2ludCwgdGhpcy5zZXQgaXMgYSAyZCBhcnJheSBvZiBwYXJ0aWFsXG4gIC8vIHBhdHRlcm4gc3RyaW5ncywgb3IgXCIqKlwiLlxuICAvL1xuICAvLyBJdCdzIGJldHRlciB0byB1c2UgLm1hdGNoKCkuICBUaGlzIGZ1bmN0aW9uIHNob3VsZG4ndFxuICAvLyBiZSB1c2VkLCByZWFsbHksIGJ1dCBpdCdzIHByZXR0eSBjb252ZW5pZW50IHNvbWV0aW1lcyxcbiAgLy8gd2hlbiB5b3UganVzdCB3YW50IHRvIHdvcmsgd2l0aCBhIHJlZ2V4LlxuICB2YXIgc2V0ID0gdGhpcy5zZXRcblxuICBpZiAoIXNldC5sZW5ndGgpIHtcbiAgICB0aGlzLnJlZ2V4cCA9IGZhbHNlXG4gICAgcmV0dXJuIHRoaXMucmVnZXhwXG4gIH1cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNcblxuICB2YXIgdHdvU3RhciA9IG9wdGlvbnMubm9nbG9ic3RhciA/IHN0YXJcbiAgICA6IG9wdGlvbnMuZG90ID8gdHdvU3RhckRvdFxuICAgIDogdHdvU3Rhck5vRG90XG4gIHZhciBmbGFncyA9IG9wdGlvbnMubm9jYXNlID8gJ2knIDogJydcblxuICB2YXIgcmUgPSBzZXQubWFwKGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4ubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gKHAgPT09IEdMT0JTVEFSKSA/IHR3b1N0YXJcbiAgICAgIDogKHR5cGVvZiBwID09PSAnc3RyaW5nJykgPyByZWdFeHBFc2NhcGUocClcbiAgICAgIDogcC5fc3JjXG4gICAgfSkuam9pbignXFxcXFxcLycpXG4gIH0pLmpvaW4oJ3wnKVxuXG4gIC8vIG11c3QgbWF0Y2ggZW50aXJlIHBhdHRlcm5cbiAgLy8gZW5kaW5nIGluIGEgKiBvciAqKiB3aWxsIG1ha2UgaXQgbGVzcyBzdHJpY3QuXG4gIHJlID0gJ14oPzonICsgcmUgKyAnKSQnXG5cbiAgLy8gY2FuIG1hdGNoIGFueXRoaW5nLCBhcyBsb25nIGFzIGl0J3Mgbm90IHRoaXMuXG4gIGlmICh0aGlzLm5lZ2F0ZSkgcmUgPSAnXig/IScgKyByZSArICcpLiokJ1xuXG4gIHRyeSB7XG4gICAgdGhpcy5yZWdleHAgPSBuZXcgUmVnRXhwKHJlLCBmbGFncylcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICB0aGlzLnJlZ2V4cCA9IGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRoaXMucmVnZXhwXG59XG5cbm1pbmltYXRjaC5tYXRjaCA9IGZ1bmN0aW9uIChsaXN0LCBwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBtbSA9IG5ldyBNaW5pbWF0Y2gocGF0dGVybiwgb3B0aW9ucylcbiAgbGlzdCA9IGxpc3QuZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIG1tLm1hdGNoKGYpXG4gIH0pXG4gIGlmIChtbS5vcHRpb25zLm5vbnVsbCAmJiAhbGlzdC5sZW5ndGgpIHtcbiAgICBsaXN0LnB1c2gocGF0dGVybilcbiAgfVxuICByZXR1cm4gbGlzdFxufVxuXG5NaW5pbWF0Y2gucHJvdG90eXBlLm1hdGNoID0gbWF0Y2hcbmZ1bmN0aW9uIG1hdGNoIChmLCBwYXJ0aWFsKSB7XG4gIHRoaXMuZGVidWcoJ21hdGNoJywgZiwgdGhpcy5wYXR0ZXJuKVxuICAvLyBzaG9ydC1jaXJjdWl0IGluIHRoZSBjYXNlIG9mIGJ1c3RlZCB0aGluZ3MuXG4gIC8vIGNvbW1lbnRzLCBldGMuXG4gIGlmICh0aGlzLmNvbW1lbnQpIHJldHVybiBmYWxzZVxuICBpZiAodGhpcy5lbXB0eSkgcmV0dXJuIGYgPT09ICcnXG5cbiAgaWYgKGYgPT09ICcvJyAmJiBwYXJ0aWFsKSByZXR1cm4gdHJ1ZVxuXG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zXG5cbiAgLy8gd2luZG93czogbmVlZCB0byB1c2UgLywgbm90IFxcXG4gIGlmIChwYXRoLnNlcCAhPT0gJy8nKSB7XG4gICAgZiA9IGYuc3BsaXQocGF0aC5zZXApLmpvaW4oJy8nKVxuICB9XG5cbiAgLy8gdHJlYXQgdGhlIHRlc3QgcGF0aCBhcyBhIHNldCBvZiBwYXRocGFydHMuXG4gIGYgPSBmLnNwbGl0KHNsYXNoU3BsaXQpXG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCAnc3BsaXQnLCBmKVxuXG4gIC8vIGp1c3QgT05FIG9mIHRoZSBwYXR0ZXJuIHNldHMgaW4gdGhpcy5zZXQgbmVlZHMgdG8gbWF0Y2hcbiAgLy8gaW4gb3JkZXIgZm9yIGl0IHRvIGJlIHZhbGlkLiAgSWYgbmVnYXRpbmcsIHRoZW4ganVzdCBvbmVcbiAgLy8gbWF0Y2ggbWVhbnMgdGhhdCB3ZSBoYXZlIGZhaWxlZC5cbiAgLy8gRWl0aGVyIHdheSwgcmV0dXJuIG9uIHRoZSBmaXJzdCBoaXQuXG5cbiAgdmFyIHNldCA9IHRoaXMuc2V0XG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCAnc2V0Jywgc2V0KVxuXG4gIC8vIEZpbmQgdGhlIGJhc2VuYW1lIG9mIHRoZSBwYXRoIGJ5IGxvb2tpbmcgZm9yIHRoZSBsYXN0IG5vbi1lbXB0eSBzZWdtZW50XG4gIHZhciBmaWxlbmFtZVxuICB2YXIgaVxuICBmb3IgKGkgPSBmLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgZmlsZW5hbWUgPSBmW2ldXG4gICAgaWYgKGZpbGVuYW1lKSBicmVha1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwYXR0ZXJuID0gc2V0W2ldXG4gICAgdmFyIGZpbGUgPSBmXG4gICAgaWYgKG9wdGlvbnMubWF0Y2hCYXNlICYmIHBhdHRlcm4ubGVuZ3RoID09PSAxKSB7XG4gICAgICBmaWxlID0gW2ZpbGVuYW1lXVxuICAgIH1cbiAgICB2YXIgaGl0ID0gdGhpcy5tYXRjaE9uZShmaWxlLCBwYXR0ZXJuLCBwYXJ0aWFsKVxuICAgIGlmIChoaXQpIHtcbiAgICAgIGlmIChvcHRpb25zLmZsaXBOZWdhdGUpIHJldHVybiB0cnVlXG4gICAgICByZXR1cm4gIXRoaXMubmVnYXRlXG4gICAgfVxuICB9XG5cbiAgLy8gZGlkbid0IGdldCBhbnkgaGl0cy4gIHRoaXMgaXMgc3VjY2VzcyBpZiBpdCdzIGEgbmVnYXRpdmVcbiAgLy8gcGF0dGVybiwgZmFpbHVyZSBvdGhlcndpc2UuXG4gIGlmIChvcHRpb25zLmZsaXBOZWdhdGUpIHJldHVybiBmYWxzZVxuICByZXR1cm4gdGhpcy5uZWdhdGVcbn1cblxuLy8gc2V0IHBhcnRpYWwgdG8gdHJ1ZSB0byB0ZXN0IGlmLCBmb3IgZXhhbXBsZSxcbi8vIFwiL2EvYlwiIG1hdGNoZXMgdGhlIHN0YXJ0IG9mIFwiLyovYi8qL2RcIlxuLy8gUGFydGlhbCBtZWFucywgaWYgeW91IHJ1biBvdXQgb2YgZmlsZSBiZWZvcmUgeW91IHJ1blxuLy8gb3V0IG9mIHBhdHRlcm4sIHRoZW4gdGhhdCdzIGZpbmUsIGFzIGxvbmcgYXMgYWxsXG4vLyB0aGUgcGFydHMgbWF0Y2guXG5NaW5pbWF0Y2gucHJvdG90eXBlLm1hdGNoT25lID0gZnVuY3Rpb24gKGZpbGUsIHBhdHRlcm4sIHBhcnRpYWwpIHtcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNcblxuICB0aGlzLmRlYnVnKCdtYXRjaE9uZScsXG4gICAgeyAndGhpcyc6IHRoaXMsIGZpbGU6IGZpbGUsIHBhdHRlcm46IHBhdHRlcm4gfSlcblxuICB0aGlzLmRlYnVnKCdtYXRjaE9uZScsIGZpbGUubGVuZ3RoLCBwYXR0ZXJuLmxlbmd0aClcblxuICBmb3IgKHZhciBmaSA9IDAsXG4gICAgICBwaSA9IDAsXG4gICAgICBmbCA9IGZpbGUubGVuZ3RoLFxuICAgICAgcGwgPSBwYXR0ZXJuLmxlbmd0aFxuICAgICAgOyAoZmkgPCBmbCkgJiYgKHBpIDwgcGwpXG4gICAgICA7IGZpKyssIHBpKyspIHtcbiAgICB0aGlzLmRlYnVnKCdtYXRjaE9uZSBsb29wJylcbiAgICB2YXIgcCA9IHBhdHRlcm5bcGldXG4gICAgdmFyIGYgPSBmaWxlW2ZpXVxuXG4gICAgdGhpcy5kZWJ1ZyhwYXR0ZXJuLCBwLCBmKVxuXG4gICAgLy8gc2hvdWxkIGJlIGltcG9zc2libGUuXG4gICAgLy8gc29tZSBpbnZhbGlkIHJlZ2V4cCBzdHVmZiBpbiB0aGUgc2V0LlxuICAgIGlmIChwID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlXG5cbiAgICBpZiAocCA9PT0gR0xPQlNUQVIpIHtcbiAgICAgIHRoaXMuZGVidWcoJ0dMT0JTVEFSJywgW3BhdHRlcm4sIHAsIGZdKVxuXG4gICAgICAvLyBcIioqXCJcbiAgICAgIC8vIGEvKiovYi8qKi9jIHdvdWxkIG1hdGNoIHRoZSBmb2xsb3dpbmc6XG4gICAgICAvLyBhL2IveC95L3ovY1xuICAgICAgLy8gYS94L3kvei9iL2NcbiAgICAgIC8vIGEvYi94L2IveC9jXG4gICAgICAvLyBhL2IvY1xuICAgICAgLy8gVG8gZG8gdGhpcywgdGFrZSB0aGUgcmVzdCBvZiB0aGUgcGF0dGVybiBhZnRlclxuICAgICAgLy8gdGhlICoqLCBhbmQgc2VlIGlmIGl0IHdvdWxkIG1hdGNoIHRoZSBmaWxlIHJlbWFpbmRlci5cbiAgICAgIC8vIElmIHNvLCByZXR1cm4gc3VjY2Vzcy5cbiAgICAgIC8vIElmIG5vdCwgdGhlICoqIFwic3dhbGxvd3NcIiBhIHNlZ21lbnQsIGFuZCB0cnkgYWdhaW4uXG4gICAgICAvLyBUaGlzIGlzIHJlY3Vyc2l2ZWx5IGF3ZnVsLlxuICAgICAgLy9cbiAgICAgIC8vIGEvKiovYi8qKi9jIG1hdGNoaW5nIGEvYi94L3kvei9jXG4gICAgICAvLyAtIGEgbWF0Y2hlcyBhXG4gICAgICAvLyAtIGRvdWJsZXN0YXJcbiAgICAgIC8vICAgLSBtYXRjaE9uZShiL3gveS96L2MsIGIvKiovYylcbiAgICAgIC8vICAgICAtIGIgbWF0Y2hlcyBiXG4gICAgICAvLyAgICAgLSBkb3VibGVzdGFyXG4gICAgICAvLyAgICAgICAtIG1hdGNoT25lKHgveS96L2MsIGMpIC0+IG5vXG4gICAgICAvLyAgICAgICAtIG1hdGNoT25lKHkvei9jLCBjKSAtPiBub1xuICAgICAgLy8gICAgICAgLSBtYXRjaE9uZSh6L2MsIGMpIC0+IG5vXG4gICAgICAvLyAgICAgICAtIG1hdGNoT25lKGMsIGMpIHllcywgaGl0XG4gICAgICB2YXIgZnIgPSBmaVxuICAgICAgdmFyIHByID0gcGkgKyAxXG4gICAgICBpZiAocHIgPT09IHBsKSB7XG4gICAgICAgIHRoaXMuZGVidWcoJyoqIGF0IHRoZSBlbmQnKVxuICAgICAgICAvLyBhICoqIGF0IHRoZSBlbmQgd2lsbCBqdXN0IHN3YWxsb3cgdGhlIHJlc3QuXG4gICAgICAgIC8vIFdlIGhhdmUgZm91bmQgYSBtYXRjaC5cbiAgICAgICAgLy8gaG93ZXZlciwgaXQgd2lsbCBub3Qgc3dhbGxvdyAvLngsIHVubGVzc1xuICAgICAgICAvLyBvcHRpb25zLmRvdCBpcyBzZXQuXG4gICAgICAgIC8vIC4gYW5kIC4uIGFyZSAqbmV2ZXIqIG1hdGNoZWQgYnkgKiosIGZvciBleHBsb3NpdmVseVxuICAgICAgICAvLyBleHBvbmVudGlhbCByZWFzb25zLlxuICAgICAgICBmb3IgKDsgZmkgPCBmbDsgZmkrKykge1xuICAgICAgICAgIGlmIChmaWxlW2ZpXSA9PT0gJy4nIHx8IGZpbGVbZmldID09PSAnLi4nIHx8XG4gICAgICAgICAgICAoIW9wdGlvbnMuZG90ICYmIGZpbGVbZmldLmNoYXJBdCgwKSA9PT0gJy4nKSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgLy8gb2ssIGxldCdzIHNlZSBpZiB3ZSBjYW4gc3dhbGxvdyB3aGF0ZXZlciB3ZSBjYW4uXG4gICAgICB3aGlsZSAoZnIgPCBmbCkge1xuICAgICAgICB2YXIgc3dhbGxvd2VlID0gZmlsZVtmcl1cblxuICAgICAgICB0aGlzLmRlYnVnKCdcXG5nbG9ic3RhciB3aGlsZScsIGZpbGUsIGZyLCBwYXR0ZXJuLCBwciwgc3dhbGxvd2VlKVxuXG4gICAgICAgIC8vIFhYWCByZW1vdmUgdGhpcyBzbGljZS4gIEp1c3QgcGFzcyB0aGUgc3RhcnQgaW5kZXguXG4gICAgICAgIGlmICh0aGlzLm1hdGNoT25lKGZpbGUuc2xpY2UoZnIpLCBwYXR0ZXJuLnNsaWNlKHByKSwgcGFydGlhbCkpIHtcbiAgICAgICAgICB0aGlzLmRlYnVnKCdnbG9ic3RhciBmb3VuZCBtYXRjaCEnLCBmciwgZmwsIHN3YWxsb3dlZSlcbiAgICAgICAgICAvLyBmb3VuZCBhIG1hdGNoLlxuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY2FuJ3Qgc3dhbGxvdyBcIi5cIiBvciBcIi4uXCIgZXZlci5cbiAgICAgICAgICAvLyBjYW4gb25seSBzd2FsbG93IFwiLmZvb1wiIHdoZW4gZXhwbGljaXRseSBhc2tlZC5cbiAgICAgICAgICBpZiAoc3dhbGxvd2VlID09PSAnLicgfHwgc3dhbGxvd2VlID09PSAnLi4nIHx8XG4gICAgICAgICAgICAoIW9wdGlvbnMuZG90ICYmIHN3YWxsb3dlZS5jaGFyQXQoMCkgPT09ICcuJykpIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWcoJ2RvdCBkZXRlY3RlZCEnLCBmaWxlLCBmciwgcGF0dGVybiwgcHIpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vICoqIHN3YWxsb3dzIGEgc2VnbWVudCwgYW5kIGNvbnRpbnVlLlxuICAgICAgICAgIHRoaXMuZGVidWcoJ2dsb2JzdGFyIHN3YWxsb3cgYSBzZWdtZW50LCBhbmQgY29udGludWUnKVxuICAgICAgICAgIGZyKytcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBubyBtYXRjaCB3YXMgZm91bmQuXG4gICAgICAvLyBIb3dldmVyLCBpbiBwYXJ0aWFsIG1vZGUsIHdlIGNhbid0IHNheSB0aGlzIGlzIG5lY2Vzc2FyaWx5IG92ZXIuXG4gICAgICAvLyBJZiB0aGVyZSdzIG1vcmUgKnBhdHRlcm4qIGxlZnQsIHRoZW5cbiAgICAgIGlmIChwYXJ0aWFsKSB7XG4gICAgICAgIC8vIHJhbiBvdXQgb2YgZmlsZVxuICAgICAgICB0aGlzLmRlYnVnKCdcXG4+Pj4gbm8gbWF0Y2gsIHBhcnRpYWw/JywgZmlsZSwgZnIsIHBhdHRlcm4sIHByKVxuICAgICAgICBpZiAoZnIgPT09IGZsKSByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLy8gc29tZXRoaW5nIG90aGVyIHRoYW4gKipcbiAgICAvLyBub24tbWFnaWMgcGF0dGVybnMganVzdCBoYXZlIHRvIG1hdGNoIGV4YWN0bHlcbiAgICAvLyBwYXR0ZXJucyB3aXRoIG1hZ2ljIGhhdmUgYmVlbiB0dXJuZWQgaW50byByZWdleHBzLlxuICAgIHZhciBoaXRcbiAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAob3B0aW9ucy5ub2Nhc2UpIHtcbiAgICAgICAgaGl0ID0gZi50b0xvd2VyQ2FzZSgpID09PSBwLnRvTG93ZXJDYXNlKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhpdCA9IGYgPT09IHBcbiAgICAgIH1cbiAgICAgIHRoaXMuZGVidWcoJ3N0cmluZyBtYXRjaCcsIHAsIGYsIGhpdClcbiAgICB9IGVsc2Uge1xuICAgICAgaGl0ID0gZi5tYXRjaChwKVxuICAgICAgdGhpcy5kZWJ1ZygncGF0dGVybiBtYXRjaCcsIHAsIGYsIGhpdClcbiAgICB9XG5cbiAgICBpZiAoIWhpdCkgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBOb3RlOiBlbmRpbmcgaW4gLyBtZWFucyB0aGF0IHdlJ2xsIGdldCBhIGZpbmFsIFwiXCJcbiAgLy8gYXQgdGhlIGVuZCBvZiB0aGUgcGF0dGVybi4gIFRoaXMgY2FuIG9ubHkgbWF0Y2ggYVxuICAvLyBjb3JyZXNwb25kaW5nIFwiXCIgYXQgdGhlIGVuZCBvZiB0aGUgZmlsZS5cbiAgLy8gSWYgdGhlIGZpbGUgZW5kcyBpbiAvLCB0aGVuIGl0IGNhbiBvbmx5IG1hdGNoIGFcbiAgLy8gYSBwYXR0ZXJuIHRoYXQgZW5kcyBpbiAvLCB1bmxlc3MgdGhlIHBhdHRlcm4ganVzdFxuICAvLyBkb2Vzbid0IGhhdmUgYW55IG1vcmUgZm9yIGl0LiBCdXQsIGEvYi8gc2hvdWxkICpub3QqXG4gIC8vIG1hdGNoIFwiYS9iLypcIiwgZXZlbiB0aG91Z2ggXCJcIiBtYXRjaGVzIGFnYWluc3QgdGhlXG4gIC8vIFteL10qPyBwYXR0ZXJuLCBleGNlcHQgaW4gcGFydGlhbCBtb2RlLCB3aGVyZSBpdCBtaWdodFxuICAvLyBzaW1wbHkgbm90IGJlIHJlYWNoZWQgeWV0LlxuICAvLyBIb3dldmVyLCBhL2IvIHNob3VsZCBzdGlsbCBzYXRpc2Z5IGEvKlxuXG4gIC8vIG5vdyBlaXRoZXIgd2UgZmVsbCBvZmYgdGhlIGVuZCBvZiB0aGUgcGF0dGVybiwgb3Igd2UncmUgZG9uZS5cbiAgaWYgKGZpID09PSBmbCAmJiBwaSA9PT0gcGwpIHtcbiAgICAvLyByYW4gb3V0IG9mIHBhdHRlcm4gYW5kIGZpbGVuYW1lIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgLy8gYW4gZXhhY3QgaGl0IVxuICAgIHJldHVybiB0cnVlXG4gIH0gZWxzZSBpZiAoZmkgPT09IGZsKSB7XG4gICAgLy8gcmFuIG91dCBvZiBmaWxlLCBidXQgc3RpbGwgaGFkIHBhdHRlcm4gbGVmdC5cbiAgICAvLyB0aGlzIGlzIG9rIGlmIHdlJ3JlIGRvaW5nIHRoZSBtYXRjaCBhcyBwYXJ0IG9mXG4gICAgLy8gYSBnbG9iIGZzIHRyYXZlcnNhbC5cbiAgICByZXR1cm4gcGFydGlhbFxuICB9IGVsc2UgaWYgKHBpID09PSBwbCkge1xuICAgIC8vIHJhbiBvdXQgb2YgcGF0dGVybiwgc3RpbGwgaGF2ZSBmaWxlIGxlZnQuXG4gICAgLy8gdGhpcyBpcyBvbmx5IGFjY2VwdGFibGUgaWYgd2UncmUgb24gdGhlIHZlcnkgbGFzdFxuICAgIC8vIGVtcHR5IHNlZ21lbnQgb2YgYSBmaWxlIHdpdGggYSB0cmFpbGluZyBzbGFzaC5cbiAgICAvLyBhLyogc2hvdWxkIG1hdGNoIGEvYi9cbiAgICB2YXIgZW1wdHlGaWxlRW5kID0gKGZpID09PSBmbCAtIDEpICYmIChmaWxlW2ZpXSA9PT0gJycpXG4gICAgcmV0dXJuIGVtcHR5RmlsZUVuZFxuICB9XG5cbiAgLy8gc2hvdWxkIGJlIHVucmVhY2hhYmxlLlxuICB0aHJvdyBuZXcgRXJyb3IoJ3d0Zj8nKVxufVxuXG4vLyByZXBsYWNlIHN0dWZmIGxpa2UgXFwqIHdpdGggKlxuZnVuY3Rpb24gZ2xvYlVuZXNjYXBlIChzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoL1xcXFwoLikvZywgJyQxJylcbn1cblxuZnVuY3Rpb24gcmVnRXhwRXNjYXBlIChzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJylcbn1cbiIsImV4cG9ydCBpbnRlcmZhY2UgQmFzaWNJbmZvIHtcbiAgICBuYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RvcmFnZUluZm8gZXh0ZW5kcyBCYXNpY0luZm8ge1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICBvcmlnaW46IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIE1pZGRsZXdhcmVIb2xkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge31cbiAgICAgIFxuICAgIHB1YmxpYyB1c2UoZm4pIHtcbiAgICAgICAgdGhpcy5nbyA9ICgoc3RhY2spID0+ICguLi5hcmdzKSA9PiBzdGFjayguLi5hcmdzLnNsaWNlKDAsIC0xKSwgKCkgPT4ge1xuICAgICAgICAgIGxldCBfbmV4dCA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICAgICAgICBmbi5hcHBseSh0aGlzLCBbLi4uYXJncy5zbGljZSgwLCAtMSksIF9uZXh0LmJpbmQuYXBwbHkoX25leHQsIFtudWxsLCAuLi5hcmdzLnNsaWNlKDAsIC0xKV0pXSk7XG4gICAgICAgIH0pKSh0aGlzLmdvKTtcbiAgICB9XG4gICAgICBcbiAgICBwdWJsaWMgZ28oLi4uYXJncykge1xuICAgICAgICBsZXQgX25leHQgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgIF9uZXh0LmFwcGx5KHRoaXMsIGFyZ3Muc2xpY2UoMCwgLTEpKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyXCI7XG5pbXBvcnQgeyBNaWRkbGV3YXJlU3RhY2sgfSBmcm9tIFwiLi9taWRkbGV3YXJlLXN0YWNrXCI7XG5pbXBvcnQgeyBNaWRkbGV3YXJlSG9sZGVyLCBTdG9yYWdlSW5mbywgQmFzaWNJbmZvIH0gZnJvbSBcIi4vbWlkZGxld2FyZS1ob2xkZXJcIjtcbmltcG9ydCAqIGFzIG1pbmltYXRjaCBmcm9tICdtaW5pbWF0Y2gnO1xuXG5leHBvcnQgY2xhc3MgQXBwbGljYXRpb24ge1xuICAgIHByaXZhdGUgX3Byb3ZpZGVyczogUHJvdmlkZXJbXTtcbiAgICBwcml2YXRlIF9taWRkbGV3YXJlOiBNaWRkbGV3YXJlU3RhY2tbXTtcblxuICAgIC8vIG1pZGRsZXdhcmUgaG9sZGVycyBmb3Igb3VyIGFwaVxuICAgIHByaXZhdGUgX3NldE1pZGRsZXdhcmU6IE1pZGRsZXdhcmVIb2xkZXI7XG4gICAgcHJpdmF0ZSBfZ2V0TWlkZGxld2FyZTogTWlkZGxld2FyZUhvbGRlcjtcbiAgICBwcml2YXRlIF9kZWxldGVNaWRkbGV3YXJlOiBNaWRkbGV3YXJlSG9sZGVyO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3Byb3ZpZGVycyA9IFtdO1xuICAgICAgICB0aGlzLl9taWRkbGV3YXJlID0gW107XG4gICAgICAgIHRoaXMuX3NldE1pZGRsZXdhcmUgPSBuZXcgTWlkZGxld2FyZUhvbGRlcigpO1xuICAgICAgICB0aGlzLl9nZXRNaWRkbGV3YXJlID0gbmV3IE1pZGRsZXdhcmVIb2xkZXIoKTtcbiAgICAgICAgdGhpcy5fZGVsZXRlTWlkZGxld2FyZSA9IG5ldyBNaWRkbGV3YXJlSG9sZGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlZ2lzdGVyUHJvdmlkZXIocHJvdmlkZXI6IFByb3ZpZGVyKSB7XG4gICAgICAgIHRoaXMuX3Byb3ZpZGVycy5wdXNoKHByb3ZpZGVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXNlKHBhdGg6IHN0cmluZywgbWlkZGxld2FyZTogTWlkZGxld2FyZVN0YWNrKSB7XG4gICAgICAgIC8vIHJvdXRlLm1hdGNoKCcvbXkvZmFuY3kvcm91dGUvcGFnZS83JylcbiAgICAgICAgdGhpcy5fbWlkZGxld2FyZS5wdXNoKG1pZGRsZXdhcmUpO1xuICAgICAgICB0aGlzLl9zZXRNaWRkbGV3YXJlLnVzZSgoc2k6IFN0b3JhZ2VJbmZvLCBuZXh0KSA9PiB0aGlzLmNoZWNrUm91dGUocGF0aCwgc2ksIG5leHQsIChzaSwgbmV4dCkgPT4gbWlkZGxld2FyZS5zZXQoc2ksIG5leHQpKSk7XG4gICAgICAgIHRoaXMuX2dldE1pZGRsZXdhcmUudXNlKChzaTogU3RvcmFnZUluZm8sIG5leHQpID0+IHRoaXMuY2hlY2tSb3V0ZShwYXRoLCBzaSwgbmV4dCwgKHNpLCBuZXh0KSA9PiBtaWRkbGV3YXJlLmdldChzaSwgbmV4dCkpKTtcbiAgICAgICAgdGhpcy5fZGVsZXRlTWlkZGxld2FyZS51c2UoKGJpOiBCYXNpY0luZm8sIG5leHQpID0+IHRoaXMuY2hlY2tSb3V0ZShwYXRoLCBiaSwgbmV4dCwgKGJpLCBuZXh0KSA9PiBtaWRkbGV3YXJlLmRlbGV0ZSA/IG1pZGRsZXdhcmUuZGVsZXRlKGJpLCBuZXh0KSA6IG5leHQoKSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2hlY2tSb3V0ZShwYXR0ZXJuOiBzdHJpbmcsIGJhc2ljSW5mbzogQmFzaWNJbmZvLCBuZXh0OiAoKSA9PiB2b2lkLCBmbjogKEJhc2ljSW5mbywgRnVuY3Rpb24pID0+IHZvaWQpIHtcbiAgICAgICAgbGV0IGlzTWF0Y2ggPSBtaW5pbWF0Y2goYmFzaWNJbmZvLm5hbWUsIHBhdHRlcm4pO1xuICAgICAgICBpZiAoaXNNYXRjaCkge1xuICAgICAgICAgICAgZm4oYmFzaWNJbmZvLCBuZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldChuYW1lOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9zZXRNaWRkbGV3YXJlLmdvKHtvcmlnaW46IGNvbnRlbnQsIGNvbnRlbnQ6IGNvbnRlbnQsIG5hbWU6IG5hbWV9LCAoc3RvcmFnZUluZm86IFN0b3JhZ2VJbmZvKSA9PiB7XG4gICAgICAgICAgICAvLyBhcHBseSB0aGlzIHRvIHRoZSBwcm92aWRlcnNcbiAgICAgICAgICAgIHRoaXMuX3Byb3ZpZGVycy5mb3JFYWNoKHAgPT4gcC5zZXQobmFtZSwgc3RvcmFnZUluZm8uY29udGVudCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXQobmFtZTogc3RyaW5nLCBmbjogKFN0b3JhZ2VJbmZvKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMubGFzdFByb3ZpZGVyLmdldChuYW1lKS50aGVuKHMgPT4ge1xuICAgICAgICAgICAgdGhpcy5fZ2V0TWlkZGxld2FyZS5nbyh7b3JpZ2luOiBzLCBjb250ZW50OiBzLCBuYW1lOiBuYW1lfSwgKHN0b3JhZ2VJbmZvOiBTdG9yYWdlSW5mbykgPT4ge1xuICAgICAgICAgICAgICAgIGZuKHN0b3JhZ2VJbmZvKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWxldGUobmFtZTogc3RyaW5nLCBmbj86IChCYXNpY0luZm8pID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5sYXN0UHJvdmlkZXIuZGVsZXRlKG5hbWUpLnRoZW4ocyA9PiB7XG4gICAgICAgICAgICB0aGlzLl9kZWxldGVNaWRkbGV3YXJlLmdvKHtuYW1lOiBuYW1lfSwgZm4gPyBmbiA6IChzcykgPT4ge30pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBsYXN0UHJvdmlkZXIoKTogUHJvdmlkZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXJzW3RoaXMuX3Byb3ZpZGVycy5sZW5ndGggLSAxXVxuICAgIH1cblxufSIsImltcG9ydCB7IEFwcGxpY2F0aW9uIH0gZnJvbSBcIi4vYXBwbGljYXRpb25cIjtcblxuZXhwb3J0IGNvbnN0IHNzID0gbmV3IEFwcGxpY2F0aW9uKCk7Il0sInNvdXJjZVJvb3QiOiIifQ==